// generated by com.fiji.fivm.bottomup.Main -- DO NOT EDIT!
package com.fiji.fivm.c1.x86;
import com.fiji.fivm.c1.*;
/** Generated from compiler/src/com/fiji/fivm/c1/x86/AddressModeBU.bu */
public abstract class AddressModeBU extends BottomUpVisitor {
    /** cVar := GetCVarAddress() */
protected abstract boolean visitCVar(Operation getCVarAddress);
    /** addCVar := Add(GetCVarAddress(), a) */
protected abstract boolean visitAddCVar(Operation add,
Instruction getCVarAddress);
    /** addAddCVar := add1=Add(add2=Add(GetCVarAddress(), %a), $b) */
protected abstract boolean visitAddAddCVar(Operation add1,
Instruction add2,
Instruction getCVarAddress);
    /** cArg := GetCArgAddress() */
protected abstract boolean visitCArg(Operation getCArgAddress);
    /** addCArg := Add(GetCArgAddress(), $a) */
protected abstract boolean visitAddCArg(Operation add,
Instruction getCArgAddress);
    /** addAddAdd := add1=Add(add2=Add(add3=Add(!%a, $b), $c), $d) */
protected abstract boolean visitAddAddAdd(Operation add1,
Instruction add2,
Instruction add3);
    /** addAddShl1 := add1=Add(add2=Add(Shl(!%a, $b), %c), $d) */
protected abstract boolean visitAddAddShl1(Operation add1,
Instruction add2,
Instruction shl);
    /** addAddShl2 := add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d) */
protected abstract boolean visitAddAddShl2(Operation add1,
Instruction add2,
Instruction shl);
    /** addAddShl3 := add1=Add(add2=Add(!%a, $b), Shl(!%c, $d)) */
protected abstract boolean visitAddAddShl3(Operation add1,
Instruction add2,
Instruction shl);
    /** addShl1 := Add(Shl(!%a, $b), $c) */
protected abstract boolean visitAddShl1(Operation add,
Instruction shl);
    /** addAdd1 := add1=Add(add2=Add(!%a, %b), $c) */
protected abstract boolean visitAddAdd1(Operation add1,
Instruction add2);
    /** addShl2 := Add(Shl(!%a, $b), %c) */
protected abstract boolean visitAddShl2(Operation add,
Instruction shl);
    /** addAdd2 := add1=Add(add2=Add(!%a, $b), $c) */
protected abstract boolean visitAddAdd2(Operation add1,
Instruction add2);
    /** addShl3 := Add(!%a, Shl(!%b, $c)) */
protected abstract boolean visitAddShl3(Operation add,
Instruction shl);
    /** add := Add(a, b) */
protected abstract boolean visitAdd(Operation add);
    /** shl := Shl(!%a, $b) */
protected abstract boolean visitShl(Operation shl);

private boolean __handleGetCVarAddress(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitCVar(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleAdd(Operation o,int numOpVars) {
Arg __tmp1=o.rhs(0);
if (__tmp1 instanceof Var) {
Var __tmp2=(Var)__tmp1;
Instruction __tmp3=findInstruction(__tmp2);
if (__tmp3!=null) {
opVars[numOpVars+0]=__tmp2;
switch (__tmp3.opcode()) {
case GetCVarAddress: {
this.numOpVars=numOpVars+1;
if (visitAddCVar(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
break;
}
case Add: {
Arg __tmp4=__tmp3.rhs(0);
if (__tmp4 instanceof Var) {
Var __tmp5=(Var)__tmp4;
Instruction __tmp6=findInstruction(__tmp5);
if (__tmp6!=null) {
opVars[numOpVars+1]=__tmp5;
switch (__tmp6.opcode()) {
case GetCVarAddress: {
this.numOpVars=numOpVars+2;
if (o.rhs(1) instanceof Arg.IntConst) {
if (__tmp3.rhs(1) instanceof Var) {
if (visitAddAddCVar(o,
__tmp3,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp6);
return true;
}
}
}
break;
}
case Add: {
this.numOpVars=numOpVars+2;
if (__tmp6.rhs(1) instanceof Arg.IntConst &&
__tmp3.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp6.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(add3=Add(!%a, $b), $c), $d)' is not a variable in: "+__tmp6);
}
if (visitAddAddAdd(o,
__tmp3,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp6);
return true;
}
}
break;
}
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp6.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (__tmp3.rhs(1) instanceof Var) {
if (!(__tmp6.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(Shl(!%a, $b), %c), $d)' is not a variable in: "+__tmp6);
}
if (visitAddAddShl1(o,
__tmp3,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp6);
return true;
}
}
}
break;
}
default: break;
}
}
}
Arg __tmp7=__tmp3.rhs(1);
if (__tmp7 instanceof Var) {
Var __tmp8=(Var)__tmp7;
Instruction __tmp9=findInstruction(__tmp8);
if (__tmp9!=null) {
opVars[numOpVars+1]=__tmp8;
switch (__tmp9.opcode()) {
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp9.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d)' is not a variable in: "+__tmp3);
}
if (!(__tmp9.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d)' is not a variable in: "+__tmp9);
}
if (visitAddAddShl2(o,
__tmp3,
__tmp9)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp9);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp10=o.rhs(1);
if (__tmp10 instanceof Var) {
Var __tmp11=(Var)__tmp10;
Instruction __tmp12=findInstruction(__tmp11);
if (__tmp12!=null) {
opVars[numOpVars+1]=__tmp11;
switch (__tmp12.opcode()) {
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp3.rhs(1) instanceof Arg.IntConst &&
__tmp12.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, $b), Shl(!%c, $d))' is not a variable in: "+__tmp3);
}
if (!(__tmp12.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%c' to 'add1=Add(add2=Add(!%a, $b), Shl(!%c, $d))' is not a variable in: "+__tmp12);
}
if (visitAddAddShl3(o,
__tmp3,
__tmp12)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp12);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1) instanceof Arg.IntConst) {
if (__tmp3.rhs(1) instanceof Var) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, %b), $c)' is not a variable in: "+__tmp3);
}
if (visitAddAdd1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
}
this.numOpVars=numOpVars+1;
if (__tmp3.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, $b), $c)' is not a variable in: "+__tmp3);
}
if (visitAddAdd2(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
break;
}
case GetCArgAddress: {
this.numOpVars=numOpVars+1;
if (o.rhs(1) instanceof Arg.IntConst) {
if (visitAddCArg(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
break;
}
case Shl: {
this.numOpVars=numOpVars+1;
if (__tmp3.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(Shl(!%a, $b), $c)' is not a variable in: "+__tmp3);
}
if (visitAddShl1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
this.numOpVars=numOpVars+1;
if (__tmp3.rhs(1) instanceof Arg.IntConst) {
if (o.rhs(1) instanceof Var) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(Shl(!%a, $b), %c)' is not a variable in: "+__tmp3);
}
if (visitAddShl2(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
}
break;
}
default: break;
}
}
}
Arg __tmp13=o.rhs(1);
if (__tmp13 instanceof Var) {
Var __tmp14=(Var)__tmp13;
Instruction __tmp15=findInstruction(__tmp14);
if (__tmp15!=null) {
opVars[numOpVars+0]=__tmp14;
switch (__tmp15.opcode()) {
case Shl: {
this.numOpVars=numOpVars+1;
if (__tmp15.rhs(1) instanceof Arg.IntConst) {
if (!(o.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(!%a, Shl(!%b, $c))' is not a variable in: "+o);
}
if (!(__tmp15.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Add(!%a, Shl(!%b, $c))' is not a variable in: "+__tmp15);
}
if (visitAddShl3(o,
__tmp15)) {
acceptedOperation(o);
acceptedOperation(__tmp15);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitAdd(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleGetCArgAddress(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitCArg(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleShl(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (o.rhs(1) instanceof Arg.IntConst) {
if (!(o.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Shl(!%a, $b)' is not a variable in: "+o);
}
if (visitShl(o)) {
acceptedOperation(o);
return true;
}
}
return false;
}
public boolean acceptImpl(Operation o,int numOpVars) {
switch (o.opcode()) {
case GetCVarAddress:
if (__handleGetCVarAddress(o,numOpVars)) return true;
else break;
case Add:
if (__handleAdd(o,numOpVars)) return true;
else break;
case GetCArgAddress:
if (__handleGetCArgAddress(o,numOpVars)) return true;
else break;
case Shl:
if (__handleShl(o,numOpVars)) return true;
else break;
default: break;
}
this.numOpVars=numOpVars;
if (visitDefault(o)) {
acceptedOperation(o);
return true;
}
return false;
}
public AddressModeBU() {
super(2);
}
}
