#
# EffectiveAddress.bu
# Copyright 2008, 2009, 2010, 2011, 2012, 2013 Fiji Systems Inc.
# This file is part of the FIJI VM Software licensed under the FIJI PUBLIC
# LICENSE Version 3 or any later version.  A copy of the FIJI PUBLIC LICENSE is
# available at fivm/LEGAL and can also be found at
# http://www.fiji-systems.com/FPL3.txt
# 
# By installing, reproducing, distributing, and/or using the FIJI VM Software
# you agree to the terms of the FIJI PUBLIC LICENSE.  You may exercise the
# rights granted under the FIJI PUBLIC LICENSE subject to the conditions and
# restrictions stated therein.  Among other conditions and restrictions, the
# FIJI PUBLIC LICENSE states that:
# 
# a. You may only make non-commercial use of the FIJI VM Software.
# 
# b. Any adaptation you make must be licensed under the same terms 
# of the FIJI PUBLIC LICENSE.
# 
# c. You must include a copy of the FIJI PUBLIC LICENSE in every copy of any
# file, adaptation or output code that you distribute and cause the output code
# to provide a notice of the FIJI PUBLIC LICENSE. 
# 
# d. You must not impose any additional conditions.
# 
# e. You must not assert or imply any connection, sponsorship or endorsement by
# the author of the FIJI VM Software
# 
# f. You must take no derogatory action in relation to the FIJI VM Software
# which would be prejudicial to the FIJI VM Software author's honor or
# reputation.
# 
# 
# The FIJI VM Software is provided as-is.  FIJI SYSTEMS INC does not make any
# representation and provides no warranty of any kind concerning the software.
# 
# The FIJI PUBLIC LICENSE and any rights granted therein terminate
# automatically upon any breach by you of the terms of the FIJI PUBLIC LICENSE.
#
#

module EffectiveAddress

# FIXME: add Add(Add(Mul(Add(a,b),c),d),e), since b can be factored out
# into a constant addition.  or.... we could add this as a peephole bottom-up
# reassociation rule, somewhere.

# NOTE: these rules crucially rely on reassociation having run previously,
# and also on the simplifier doing canonicalization of additions (i.e.
# Add(immediate, var) becomes Add(var, immediate)).  As such, there may
# seem to be some rules that are omitted; in fact they are not here because
# they will never arise after reassociation/canonicalization.

# FIXME: is that really true?  reassociation relies on results not being
# shared...  also the requirements here for stuff to be variables may be
# broken in the same regard.  we may see Add(Add(Shl(%a,$b),$c),$d) because
# the results of the inner Add are shared.  yuck.  I need to think about this
# some more.

# support for AbsSymMem and OffSymMem
cVar := GetCVarAddress()
addCVar := Add(GetCVarAddress(),a)
addAddCVar := Add(Add(GetCVarAddress(),%a),$b)

# support for InParamSlot
cArg := GetCArgAddress()
addCArg := Add(GetCArgAddress(),$a)

# hack for reassociation
addAddAdd := Add(Add(Add(!%a,$b),$c),$d)

# support for IndexMem
addAddShl1 := Add(Add(Shl(!%a,$b),%c),$d)
addAddShl2 := Add(Add(!%a,Shl(!%b,$c)),$d)
addAddShl3 := Add(Add(!%a,$b),Shl(!%c,$d))

# support for AbsIndexMem, IndexMem, and OffMem, and hacks to get around
# breakeage in reassociation ... reassociation will bail out if there's sharing,
# but we know better
addShl1 := Add(Shl(!%a,$b),$c)
addAdd1 := Add(Add(!%a,%b),$c)
addShl2 := Add(Shl(!%a,$b),%c)
addAdd2 := Add(Add(!%a,$b),$c)
addShl3 := Add(!%a,Shl(!%b,$c))

add := Add(a,b)
