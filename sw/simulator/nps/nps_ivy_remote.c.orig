/*
 * nps_ivy_remote.c
 *
 *  Created on: May 23, 2014
 *      Author: j3
 */

#include "nps_ivy.h"

#include <stdlib.h>
#include <Ivy/ivy.h>

#include "generated/airframe.h"
#include "math/pprz_algebra_double.h"
#include "subsystems/ins.h"
#include "subsystems/navigation/common_nav.h"
#include "subsystems/commands.h"
#include "multi/potential.h"

/* remote autopilot specific Datalink Ivy functions */
void on_DL_MOVE_WP(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]);
void on_NPS_ATP_CMD(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]);
void on_COMMANDS(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]);

void nps_ivy_init(char* ivy_bus) {
	/* init ivy and bind some messages common to fw and rotorcraft */
	nps_ivy_common_init(ivy_bus);

	IvyBindMsg(on_DL_MOVE_WP, NULL,
			"^(\\S*) MOVE_WP (\\S*) (\\S*) (\\S*) (\\S*) (\\S*)");

	//Get the commands from the Autopilot for this simulation
	IvyBindMsg(on_NPS_ATP_CMD, NULL, "^NPS_ATP_CMD(.*)");

	//Get the standard commands from the Autopilot for this simulation
	IvyBindMsg(on_COMMANDS, NULL, "^\\S* COMMANDS (\\S*)");
}

//TODO use datalink parsing from fixedwing instead of doing it here explicitly

#include "generated/settings.h"
#include "dl_protocol.h"
#include "subsystems/datalink/downlink.h"

#define MOfCm(_x) (((float)(_x))/100.)

void on_DL_MOVE_WP(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]) {

	if (atoi(argv[2]) == AC_ID) {
		uint8_t wp_id = atoi(argv[1]);
		float a = MOfCm(atoi(argv[5]));

		/* Computes from (lat, long) in the referenced UTM zone */
		struct LlaCoor_f lla;
		lla.lat = RadOfDeg((float )(atoi(argv[3]) / 1e7));
		lla.lon = RadOfDeg((float )(atoi(argv[4]) / 1e7));
		//printf("move wp id=%d lat=%f lon=%f alt=%f\n", wp_id, lla.lat, lla.lon, a);
		struct UtmCoor_f utm;
		utm.zone = nav_utm_zone0;
		utm_of_lla_f(&utm, &lla);
		nav_move_waypoint(wp_id, utm.east, utm.north, a);

		/* Waypoint range is limited. Computes the UTM pos back from the relative
		 coordinates */
		utm.east = waypoints[wp_id].x + nav_utm_east0;
		utm.north = waypoints[wp_id].y + nav_utm_north0;
		DOWNLINK_SEND_WP_MOVED(DefaultChannel, DefaultDevice, &wp_id, &utm.east,
				&utm.north, &a, &nav_utm_zone0);
		printf("move wp id=%d east=%f north=%f zone=%i alt=%f\n", wp_id,
				utm.east, utm.north, utm.zone, a);
	}
}

/**
 * Callback function for ivybus to handle the autopilot command messages from the remote simulation
 */
void on_NPS_ATP_CMD(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]) {

	const char* arg = (argc < 1) ? ":::" : argv[0];
	const char* arg2 = (argc < 2) ? "!!!" : argv[1];
	const char* arg3 = (argc < 3) ? "???" : argv[2];

	printf("on_NPS_ATP_CMD message is %s %s %s \n", arg, arg2, arg3);

	//TODO Parse the message here and stuff into  commands[] array.
	//This will then get processed in the autopilot code when it is called

}

/**
 * Callback function for ivybus to handle the autopilot command messages from the remote simulation
 */
void on_COMMANDS(IvyClientPtr app __attribute__ ((unused)),
		void *user_data __attribute__ ((unused)),
		int argc __attribute__ ((unused)), char *argv[]) {

	const char* arg = (argc < 1) ? ":::" : argv[0];

	printf("on_COMMANDS message is %s\n", arg);

	char *cp;
	//cp = strdupa(arg); /* Make writable copy.  */

	char * pch;

	pch = strtok(argv[0], " ,");
	int i = 0;
	while (pch != NULL) {
		commands[i++] = atoi(pch);
		if (i > NPS_COMMANDS_NB)
			break;
		pch = strtok(NULL, " ,");
	}

}
