// generated by com.fiji.fivm.bottomup.Main -- DO NOT EDIT!
package com.fiji.fivm.c1;
/** Generated from compiler/src/com/fiji/fivm/c1/CompareBU.bu */
public abstract class CompareBU extends BottomUpVisitor {
    /** EqCompareG := Eq(CompareG(a, b), $0) */
protected abstract boolean visitEqCompareG(Operation eq,
Instruction compareG);
    /** NeqCompareG := Neq(CompareG(a, b), $0) */
protected abstract boolean visitNeqCompareG(Operation neq,
Instruction compareG);
    /** LTCompareG1 := Eq(CompareG(a, b), $-1) */
protected abstract boolean visitLTCompareG1(Operation eq,
Instruction compareG);
    /** LECompareG1 := Neq(CompareG(a, b), $1) */
protected abstract boolean visitLECompareG1(Operation neq,
Instruction compareG);
    /** GTCompareG1 := Eq(CompareG(a, b), $1) */
protected abstract boolean visitGTCompareG1(Operation eq,
Instruction compareG);
    /** GECompareG1 := Neq(CompareG(a, b), $-1) */
protected abstract boolean visitGECompareG1(Operation neq,
Instruction compareG);
    /** EqCompareL := Eq(CompareL(a, b), $0) */
protected abstract boolean visitEqCompareL(Operation eq,
Instruction compareL);
    /** NeqCompareL := Neq(CompareL(a, b), $0) */
protected abstract boolean visitNeqCompareL(Operation neq,
Instruction compareL);
    /** LTCompareL1 := Eq(CompareL(a, b), $-1) */
protected abstract boolean visitLTCompareL1(Operation eq,
Instruction compareL);
    /** LECompareL1 := Neq(CompareL(a, b), $1) */
protected abstract boolean visitLECompareL1(Operation neq,
Instruction compareL);
    /** GTCompareL1 := Eq(CompareL(a, b), $1) */
protected abstract boolean visitGTCompareL1(Operation eq,
Instruction compareL);
    /** GECompareL1 := Neq(CompareL(a, b), $-1) */
protected abstract boolean visitGECompareL1(Operation neq,
Instruction compareL);
    /** LTCompareG2 := LessThan(CompareG(a, b), $0) */
protected abstract boolean visitLTCompareG2(Operation lessThan,
Instruction compareG);
    /** LECompareG2 := LessThanEq(CompareG(a, b), $0) */
protected abstract boolean visitLECompareG2(Operation lessThanEq,
Instruction compareG);
    /** LTCompareL2 := LessThan(CompareL(a, b), $0) */
protected abstract boolean visitLTCompareL2(Operation lessThan,
Instruction compareL);
    /** LECompareL2 := LessThanEq(CompareL(a, b), $0) */
protected abstract boolean visitLECompareL2(Operation lessThanEq,
Instruction compareL);
    /** GTCompareG2 := LessThan($0, CompareG(a, b)) */
protected abstract boolean visitGTCompareG2(Operation lessThan,
Instruction compareG);
    /** GECompareG2 := LessThanEq($0, CompareG(a, b)) */
protected abstract boolean visitGECompareG2(Operation lessThanEq,
Instruction compareG);
    /** GTCompareL2 := LessThan($0, CompareL(a, b)) */
protected abstract boolean visitGTCompareL2(Operation lessThan,
Instruction compareL);
    /** GECompareL2 := LessThanEq($0, CompareL(a, b)) */
protected abstract boolean visitGECompareL2(Operation lessThanEq,
Instruction compareL);
    /** BZCompareG := BranchZero(CompareG(a, b)) */
protected abstract boolean visitBZCompareG(Operation branchZero,
Instruction compareG);
    /** BNZCompareG := BranchNonZero(CompareG(a, b)) */
protected abstract boolean visitBNZCompareG(Operation branchNonZero,
Instruction compareG);
    /** BZCompareL := BranchZero(CompareL(a, b)) */
protected abstract boolean visitBZCompareL(Operation branchZero,
Instruction compareL);
    /** BNZCompareL := BranchNonZero(CompareL(a, b)) */
protected abstract boolean visitBNZCompareL(Operation branchNonZero,
Instruction compareL);
    /** BoolCompareG := Boolify(CompareG(a, b)) */
protected abstract boolean visitBoolCompareG(Operation boolify,
Instruction compareG);
    /** NotCompareG := Not(CompareG(a, b)) */
protected abstract boolean visitNotCompareG(Operation not,
Instruction compareG);
    /** BoolCompareL := Boolify(CompareL(a, b)) */
protected abstract boolean visitBoolCompareL(Operation boolify,
Instruction compareL);
    /** NotCompareL := Not(CompareL(a, b)) */
protected abstract boolean visitNotCompareL(Operation not,
Instruction compareL);

private boolean __handleEq(Operation o,int numOpVars) {
Arg __tmp1=o.rhs(0);
if (__tmp1 instanceof Var) {
Var __tmp2=(Var)__tmp1;
Instruction __tmp3=findInstruction(__tmp2);
if (__tmp3!=null) {
opVars[numOpVars+0]=__tmp2;
switch (__tmp3.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitEqCompareG(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(-1)) {
if (visitLTCompareG1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(1)) {
if (visitGTCompareG1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitEqCompareL(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(-1)) {
if (visitLTCompareL1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(1)) {
if (visitGTCompareL1(o,
__tmp3)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
return true;
}
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleNeq(Operation o,int numOpVars) {
Arg __tmp4=o.rhs(0);
if (__tmp4 instanceof Var) {
Var __tmp5=(Var)__tmp4;
Instruction __tmp6=findInstruction(__tmp5);
if (__tmp6!=null) {
opVars[numOpVars+0]=__tmp5;
switch (__tmp6.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitNeqCompareG(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(1)) {
if (visitLECompareG1(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(-1)) {
if (visitGECompareG1(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitNeqCompareL(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(1)) {
if (visitLECompareL1(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(-1)) {
if (visitGECompareL1(o,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp6);
return true;
}
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleLessThan(Operation o,int numOpVars) {
Arg __tmp7=o.rhs(0);
if (__tmp7 instanceof Var) {
Var __tmp8=(Var)__tmp7;
Instruction __tmp9=findInstruction(__tmp8);
if (__tmp9!=null) {
opVars[numOpVars+0]=__tmp8;
switch (__tmp9.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitLTCompareG2(o,
__tmp9)) {
acceptedOperation(o);
acceptedOperation(__tmp9);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitLTCompareL2(o,
__tmp9)) {
acceptedOperation(o);
acceptedOperation(__tmp9);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp10=o.rhs(1);
if (__tmp10 instanceof Var) {
Var __tmp11=(Var)__tmp10;
Instruction __tmp12=findInstruction(__tmp11);
if (__tmp12!=null) {
opVars[numOpVars+0]=__tmp11;
switch (__tmp12.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(0).equals(0)) {
if (visitGTCompareG2(o,
__tmp12)) {
acceptedOperation(o);
acceptedOperation(__tmp12);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(0).equals(0)) {
if (visitGTCompareL2(o,
__tmp12)) {
acceptedOperation(o);
acceptedOperation(__tmp12);
return true;
}
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleLessThanEq(Operation o,int numOpVars) {
Arg __tmp13=o.rhs(0);
if (__tmp13 instanceof Var) {
Var __tmp14=(Var)__tmp13;
Instruction __tmp15=findInstruction(__tmp14);
if (__tmp15!=null) {
opVars[numOpVars+0]=__tmp14;
switch (__tmp15.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitLECompareG2(o,
__tmp15)) {
acceptedOperation(o);
acceptedOperation(__tmp15);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitLECompareL2(o,
__tmp15)) {
acceptedOperation(o);
acceptedOperation(__tmp15);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp16=o.rhs(1);
if (__tmp16 instanceof Var) {
Var __tmp17=(Var)__tmp16;
Instruction __tmp18=findInstruction(__tmp17);
if (__tmp18!=null) {
opVars[numOpVars+0]=__tmp17;
switch (__tmp18.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (o.rhs(0).equals(0)) {
if (visitGECompareG2(o,
__tmp18)) {
acceptedOperation(o);
acceptedOperation(__tmp18);
return true;
}
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (o.rhs(0).equals(0)) {
if (visitGECompareL2(o,
__tmp18)) {
acceptedOperation(o);
acceptedOperation(__tmp18);
return true;
}
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleBranchZero(Operation o,int numOpVars) {
Arg __tmp19=o.rhs(0);
if (__tmp19 instanceof Var) {
Var __tmp20=(Var)__tmp19;
Instruction __tmp21=findInstruction(__tmp20);
if (__tmp21!=null) {
opVars[numOpVars+0]=__tmp20;
switch (__tmp21.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (visitBZCompareG(o,
__tmp21)) {
acceptedOperation(o);
acceptedOperation(__tmp21);
return true;
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (visitBZCompareL(o,
__tmp21)) {
acceptedOperation(o);
acceptedOperation(__tmp21);
return true;
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleBranchNonZero(Operation o,int numOpVars) {
Arg __tmp22=o.rhs(0);
if (__tmp22 instanceof Var) {
Var __tmp23=(Var)__tmp22;
Instruction __tmp24=findInstruction(__tmp23);
if (__tmp24!=null) {
opVars[numOpVars+0]=__tmp23;
switch (__tmp24.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (visitBNZCompareG(o,
__tmp24)) {
acceptedOperation(o);
acceptedOperation(__tmp24);
return true;
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (visitBNZCompareL(o,
__tmp24)) {
acceptedOperation(o);
acceptedOperation(__tmp24);
return true;
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleBoolify(Operation o,int numOpVars) {
Arg __tmp25=o.rhs(0);
if (__tmp25 instanceof Var) {
Var __tmp26=(Var)__tmp25;
Instruction __tmp27=findInstruction(__tmp26);
if (__tmp27!=null) {
opVars[numOpVars+0]=__tmp26;
switch (__tmp27.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (visitBoolCompareG(o,
__tmp27)) {
acceptedOperation(o);
acceptedOperation(__tmp27);
return true;
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (visitBoolCompareL(o,
__tmp27)) {
acceptedOperation(o);
acceptedOperation(__tmp27);
return true;
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleNot(Operation o,int numOpVars) {
Arg __tmp28=o.rhs(0);
if (__tmp28 instanceof Var) {
Var __tmp29=(Var)__tmp28;
Instruction __tmp30=findInstruction(__tmp29);
if (__tmp30!=null) {
opVars[numOpVars+0]=__tmp29;
switch (__tmp30.opcode()) {
case CompareG: {
this.numOpVars=numOpVars+1;
if (visitNotCompareG(o,
__tmp30)) {
acceptedOperation(o);
acceptedOperation(__tmp30);
return true;
}
break;
}
case CompareL: {
this.numOpVars=numOpVars+1;
if (visitNotCompareL(o,
__tmp30)) {
acceptedOperation(o);
acceptedOperation(__tmp30);
return true;
}
break;
}
default: break;
}
}
}
return false;
}
public boolean acceptImpl(Operation o,int numOpVars) {
switch (o.opcode()) {
case Eq:
if (__handleEq(o,numOpVars)) return true;
else break;
case Neq:
if (__handleNeq(o,numOpVars)) return true;
else break;
case LessThan:
if (__handleLessThan(o,numOpVars)) return true;
else break;
case LessThanEq:
if (__handleLessThanEq(o,numOpVars)) return true;
else break;
case BranchZero:
if (__handleBranchZero(o,numOpVars)) return true;
else break;
case BranchNonZero:
if (__handleBranchNonZero(o,numOpVars)) return true;
else break;
case Boolify:
if (__handleBoolify(o,numOpVars)) return true;
else break;
case Not:
if (__handleNot(o,numOpVars)) return true;
else break;
default: break;
}
this.numOpVars=numOpVars;
if (visitDefault(o)) {
acceptedOperation(o);
return true;
}
return false;
}
public CompareBU() {
super(1);
}
}
