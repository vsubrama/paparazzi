// generated by com.fiji.fivm.bottomup.Main -- DO NOT EDIT!
package com.fiji.fivm.c1.x86;
import com.fiji.fivm.c1.*;
/** Generated from compiler/src/com/fiji/fivm/c1/x86/MainLoweringBU.bu */
public abstract class MainLoweringBU extends BottomUpVisitor {
    /** loadAddStore1 := Store(a, Add(Load(a), b)) */
protected abstract boolean visitLoadAddStore1(Operation store,
Instruction add,
Instruction load);
    /** loadAddStore2 := Store(a, Add(!%b, Load(a))) */
protected abstract boolean visitLoadAddStore2(Operation store,
Instruction add,
Instruction load);
    /** loadSubStore := Store(a, Sub(Load(a), b)) */
protected abstract boolean visitLoadSubStore(Operation store,
Instruction sub,
Instruction load);
    /** loadNegStore := Store(a, Neg(Load(a))) */
protected abstract boolean visitLoadNegStore(Operation store,
Instruction neg,
Instruction load);
    /** loadShlStore := Store(a, Shl(Load(a), b)) */
protected abstract boolean visitLoadShlStore(Operation store,
Instruction shl,
Instruction load);
    /** loadShrStore := Store(a, Shr(Load(a), b)) */
protected abstract boolean visitLoadShrStore(Operation store,
Instruction shr,
Instruction load);
    /** loadUshrStore := Store(a, Ushr(Load(a), b)) */
protected abstract boolean visitLoadUshrStore(Operation store,
Instruction ushr,
Instruction load);
    /** loadOrStore1 := Store(a, Or(Load(a), b)) */
protected abstract boolean visitLoadOrStore1(Operation store,
Instruction or,
Instruction load);
    /** loadOrStore2 := Store(a, Or(!%b, Load(a))) */
protected abstract boolean visitLoadOrStore2(Operation store,
Instruction or,
Instruction load);
    /** loadXorStore1 := Store(a, Xor(Load(a), b)) */
protected abstract boolean visitLoadXorStore1(Operation store,
Instruction xor,
Instruction load);
    /** loadXorStore2 := Store(a, Xor(!%b, Load(a))) */
protected abstract boolean visitLoadXorStore2(Operation store,
Instruction xor,
Instruction load);
    /** loadAndStore1 := Store(a, And(Load(a), b)) */
protected abstract boolean visitLoadAndStore1(Operation store,
Instruction and,
Instruction load);
    /** loadAndStore2 := Store(a, And(!%b, Load(a))) */
protected abstract boolean visitLoadAndStore2(Operation store,
Instruction and,
Instruction load);
    /** loadBitNotStore := Store(a, BitNot(Load(a))) */
protected abstract boolean visitLoadBitNotStore(Operation store,
Instruction bitNot,
Instruction load);
    /** loadAdd1 := Add(Load(a), b) */
protected abstract boolean visitLoadAdd1(Operation add,
Instruction load);
    /** loadMul1 := Mul(Load(a), b) */
protected abstract boolean visitLoadMul1(Operation mul,
Instruction load);
    /** cVar := GetCVarAddress() */
protected abstract boolean visitCVar(Operation getCVarAddress);
    /** addCVar := Add(GetCVarAddress(), a) */
protected abstract boolean visitAddCVar(Operation add,
Instruction getCVarAddress);
    /** addAddCVar := add1=Add(add2=Add(GetCVarAddress(), %a), $b) */
protected abstract boolean visitAddAddCVar(Operation add1,
Instruction add2,
Instruction getCVarAddress);
    /** cArg := GetCArgAddress() */
protected abstract boolean visitCArg(Operation getCArgAddress);
    /** addCArg := Add(GetCArgAddress(), $a) */
protected abstract boolean visitAddCArg(Operation add,
Instruction getCArgAddress);
    /** addAddAdd := add1=Add(add2=Add(add3=Add(!%a, $b), $c), $d) */
protected abstract boolean visitAddAddAdd(Operation add1,
Instruction add2,
Instruction add3);
    /** addAddShl1 := add1=Add(add2=Add(Shl(!%a, $b), %c), $d) */
protected abstract boolean visitAddAddShl1(Operation add1,
Instruction add2,
Instruction shl);
    /** addAddShl2 := add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d) */
protected abstract boolean visitAddAddShl2(Operation add1,
Instruction add2,
Instruction shl);
    /** addAddShl3 := add1=Add(add2=Add(!%a, $b), Shl(!%c, $d)) */
protected abstract boolean visitAddAddShl3(Operation add1,
Instruction add2,
Instruction shl);
    /** addShl1 := Add(Shl(!%a, $b), $c) */
protected abstract boolean visitAddShl1(Operation add,
Instruction shl);
    /** addAdd1 := add1=Add(add2=Add(!%a, %b), $c) */
protected abstract boolean visitAddAdd1(Operation add1,
Instruction add2);
    /** addShl2 := Add(Shl(!%a, $b), %c) */
protected abstract boolean visitAddShl2(Operation add,
Instruction shl);
    /** addAdd2 := add1=Add(add2=Add(!%a, $b), $c) */
protected abstract boolean visitAddAdd2(Operation add1,
Instruction add2);
    /** addShl3 := Add(!%a, Shl(!%b, $c)) */
protected abstract boolean visitAddShl3(Operation add,
Instruction shl);
    /** add := Add(a, b) */
protected abstract boolean visitAdd(Operation add);
    /** loadAdd2 := Add(!%a, Load(b)) */
protected abstract boolean visitLoadAdd2(Operation add,
Instruction load);
    /** loadMul2 := Mul(!%a, Load(b)) */
protected abstract boolean visitLoadMul2(Operation mul,
Instruction load);
    /** loadSub := Sub(a, Load(b)) */
protected abstract boolean visitLoadSub(Operation sub,
Instruction load);
    /** loadDiv := Div(a, Load(b)) */
protected abstract boolean visitLoadDiv(Operation div,
Instruction load);
    /** loadMod := Mod(a, Load(b)) */
protected abstract boolean visitLoadMod(Operation mod,
Instruction load);
    /** loadOr1 := Or(Load(a), b) */
protected abstract boolean visitLoadOr1(Operation or,
Instruction load);
    /** loadOr2 := Or(a, Load(b)) */
protected abstract boolean visitLoadOr2(Operation or,
Instruction load);
    /** loadXor1 := Xor(Load(a), b) */
protected abstract boolean visitLoadXor1(Operation xor,
Instruction load);
    /** loadXor2 := Xor(a, Load(b)) */
protected abstract boolean visitLoadXor2(Operation xor,
Instruction load);
    /** loadAnd1 := And(Load(a), b) */
protected abstract boolean visitLoadAnd1(Operation and,
Instruction load);
    /** loadAnd2 := And(a, Load(b)) */
protected abstract boolean visitLoadAnd2(Operation and,
Instruction load);
    /** loadNot := Not(Load(a)) */
protected abstract boolean visitLoadNot(Operation not,
Instruction load);
    /** loadBoolify := Boolify(Load(a)) */
protected abstract boolean visitLoadBoolify(Operation boolify,
Instruction load);
    /** loadSqrt := Sqrt(Load(a)) */
protected abstract boolean visitLoadSqrt(Operation sqrt,
Instruction load);
    /** load := Load(a) */
protected abstract boolean visitLoad(Operation load);
    /** store := Store(a, b) */
protected abstract boolean visitStore(Operation store);
    /** strongLoadCAS := StrongLoadCAS(a, b, c) */
protected abstract boolean visitStrongLoadCAS(Operation strongLoadCAS);
    /** strongCAS := StrongCAS(a, b, c) */
protected abstract boolean visitStrongCAS(Operation strongCAS);
    /** strongVoidCAS := StrongVoidCAS(a, b, c) */
protected abstract boolean visitStrongVoidCAS(Operation strongVoidCAS);
    /** weakCAS := WeakCAS(a, b, c) */
protected abstract boolean visitWeakCAS(Operation weakCAS);
    /** boolifyAndLoad1 := Boolify(And(Load(a), b)) */
protected abstract boolean visitBoolifyAndLoad1(Operation boolify,
Instruction and,
Instruction load);
    /** boolifyAndLoad2 := Boolify(And(a, Load(b))) */
protected abstract boolean visitBoolifyAndLoad2(Operation boolify,
Instruction and,
Instruction load);
    /** boolifyAnd := Boolify(And(a, b)) */
protected abstract boolean visitBoolifyAnd(Operation boolify,
Instruction and);
    /** notAndLoad1 := Not(And(Load(a), b)) */
protected abstract boolean visitNotAndLoad1(Operation not,
Instruction and,
Instruction load);
    /** notAndLoad2 := Not(And(a, Load(b))) */
protected abstract boolean visitNotAndLoad2(Operation not,
Instruction and,
Instruction load);
    /** notAnd := Not(And(a, b)) */
protected abstract boolean visitNotAnd(Operation not,
Instruction and);
    /** eqZeroAndLoad1 := Eq(And(Load(a), b), $0) */
protected abstract boolean visitEqZeroAndLoad1(Operation eq,
Instruction and,
Instruction load);
    /** eqContentsAndLoad := Eq(And(Load(a), $b), $b) */
protected abstract boolean visitEqContentsAndLoad(Operation eq,
Instruction and,
Instruction load);
    /** eqZeroAndLoad2 := Eq(And(a, Load(b)), $0) */
protected abstract boolean visitEqZeroAndLoad2(Operation eq,
Instruction and,
Instruction load);
    /** eqZeroAnd := Eq(And(a, b), $0) */
protected abstract boolean visitEqZeroAnd(Operation eq,
Instruction and);
    /** eqContentsAnd := Eq(And(a, $b), $b) */
protected abstract boolean visitEqContentsAnd(Operation eq,
Instruction and);
    /** neqZeroAndLoad1 := Neq(And(Load(a), b), $0) */
protected abstract boolean visitNeqZeroAndLoad1(Operation neq,
Instruction and,
Instruction load);
    /** neqZeroAndLoad2 := Neq(And(a, Load(b)), $0) */
protected abstract boolean visitNeqZeroAndLoad2(Operation neq,
Instruction and,
Instruction load);
    /** neqZeroAnd := Neq(And(a, b), $0) */
protected abstract boolean visitNeqZeroAnd(Operation neq,
Instruction and);
    /** mul := Mul(a, b) */
protected abstract boolean visitMul(Operation mul);
    /** sub := Sub(a, b) */
protected abstract boolean visitSub(Operation sub);
    /** div := Div(a, b) */
protected abstract boolean visitDiv(Operation div);
    /** mod := Mod(a, b) */
protected abstract boolean visitMod(Operation mod);
    /** neg := Neg(a) */
protected abstract boolean visitNeg(Operation neg);
    /** or := Or(a, b) */
protected abstract boolean visitOr(Operation or);
    /** xor := Xor(a, b) */
protected abstract boolean visitXor(Operation xor);
    /** and := And(a, b) */
protected abstract boolean visitAnd(Operation and);
    /** bitNot := BitNot(a) */
protected abstract boolean visitBitNot(Operation bitNot);
    /** boolify := Boolify(a) */
protected abstract boolean visitBoolify(Operation boolify);
    /** shl := Shl(a, b) */
protected abstract boolean visitShl(Operation shl);
    /** shr := Shr(a, b) */
protected abstract boolean visitShr(Operation shr);
    /** ushr := Ushr(a, b) */
protected abstract boolean visitUshr(Operation ushr);
    /** fXor := FXor(a, b) */
protected abstract boolean visitFXor(Operation fXor);
    /** float0 := Float0() */
protected abstract boolean visitFloat0(Operation float0);
    /** double0 := Double0() */
protected abstract boolean visitDouble0(Operation double0);
    /** sqrt := Sqrt(a) */
protected abstract boolean visitSqrt(Operation sqrt);
    /** getArg := GetCArg() */
protected abstract boolean visitGetArg(Operation getCArg);
    /** castLoad := Cast(Load(a)) */
protected abstract boolean visitCastLoad(Operation cast,
Instruction load);
    /** cast := Cast(a) */
protected abstract boolean visitCast(Operation cast);
    /** fiat := Fiat(a) */
protected abstract boolean visitFiat(Operation fiat);
    /** zeroExtendLoad := IntToPointerZeroFill(Load(a)) */
protected abstract boolean visitZeroExtendLoad(Operation intToPointerZeroFill,
Instruction load);
    /** zeroExtend := IntToPointerZeroFill(a) */
protected abstract boolean visitZeroExtend(Operation intToPointerZeroFill);
    /** firstHalfLoad := FirstHalf(Load(a)) */
protected abstract boolean visitFirstHalfLoad(Operation firstHalf,
Instruction load);
    /** firstHalf := FirstHalf(a) */
protected abstract boolean visitFirstHalf(Operation firstHalf);
    /** secondHalfLoad := SecondHalf(Load(a)) */
protected abstract boolean visitSecondHalfLoad(Operation secondHalf,
Instruction load);
    /** secondHalf := SecondHalf(a) */
protected abstract boolean visitSecondHalf(Operation secondHalf);
    /** branchCASSucc1 := BranchNonZero(StrongCAS(a, b, c)) */
protected abstract boolean visitBranchCASSucc1(Operation branchNonZero,
Instruction strongCAS);
    /** branchCASFail1 := BranchZero(StrongCAS(a, b, c)) */
protected abstract boolean visitBranchCASFail1(Operation branchZero,
Instruction strongCAS);
    /** branchCASSucc2 := BranchNonZero(WeakCAS(a, b, c)) */
protected abstract boolean visitBranchCASSucc2(Operation branchNonZero,
Instruction weakCAS);
    /** branchCASFail2 := BranchZero(WeakCAS(a, b, c)) */
protected abstract boolean visitBranchCASFail2(Operation branchZero,
Instruction weakCAS);
    /** branchCASSucc3 := BranchNonZero(Eq(StrongLoadCAS(a, b, c), b)) */
protected abstract boolean visitBranchCASSucc3(Operation branchNonZero,
Instruction eq,
Instruction strongLoadCAS);
    /** branchCASFail3 := BranchZero(Eq(StrongLoadCAS(a, b, c), b)) */
protected abstract boolean visitBranchCASFail3(Operation branchZero,
Instruction eq,
Instruction strongLoadCAS);
    /** branchCASSucc4 := BranchZero(Neq(StrongLoadCAS(a, b, c), b)) */
protected abstract boolean visitBranchCASSucc4(Operation branchZero,
Instruction neq,
Instruction strongLoadCAS);
    /** branchCASFail4 := BranchNonZero(Neq(StrongLoadCAS(a, b, c), b)) */
protected abstract boolean visitBranchCASFail4(Operation branchNonZero,
Instruction neq,
Instruction strongLoadCAS);
    /** branchAndZeroLoad1 := BranchZero(And(Load(a), b)) */
protected abstract boolean visitBranchAndZeroLoad1(Operation branchZero,
Instruction and,
Instruction load);
    /** branchAndZeroLoad2 := BranchZero(And(a, Load(b))) */
protected abstract boolean visitBranchAndZeroLoad2(Operation branchZero,
Instruction and,
Instruction load);
    /** branchAndNotZeroLoad1 := BranchNonZero(And(Load(a), b)) */
protected abstract boolean visitBranchAndNotZeroLoad1(Operation branchNonZero,
Instruction and,
Instruction load);
    /** branchAndNotZeroLoad2 := BranchNonZero(And(a, Load(b))) */
protected abstract boolean visitBranchAndNotZeroLoad2(Operation branchNonZero,
Instruction and,
Instruction load);
    /** branchAndZero := BranchZero(And(a, b)) */
protected abstract boolean visitBranchAndZero(Operation branchZero,
Instruction and);
    /** branchAndNotZero := BranchNonZero(And(a, b)) */
protected abstract boolean visitBranchAndNotZero(Operation branchNonZero,
Instruction and);
    /** branchEq1ContentsAndLoad := BranchNonZero(Eq(And(Load(a), $b), $b)) */
protected abstract boolean visitBranchEq1ContentsAndLoad(Operation branchNonZero,
Instruction eq,
Instruction and,
Instruction load);
    /** branchEq2ContentsAndLoad := BranchZero(Neq(And(Load(a), $b), $b)) */
protected abstract boolean visitBranchEq2ContentsAndLoad(Operation branchZero,
Instruction neq,
Instruction and,
Instruction load);
    /** branchEq1ContentsAnd := BranchNonZero(Eq(And(a, $b), $b)) */
protected abstract boolean visitBranchEq1ContentsAnd(Operation branchNonZero,
Instruction eq,
Instruction and);
    /** branchEq2ContentsAnd := BranchZero(Neq(And(a, $b), $b)) */
protected abstract boolean visitBranchEq2ContentsAnd(Operation branchZero,
Instruction neq,
Instruction and);
    /** branchEq1Load1 := BranchNonZero(Eq(Load(a), b)) */
protected abstract boolean visitBranchEq1Load1(Operation branchNonZero,
Instruction eq,
Instruction load);
    /** branchEq2Load1 := BranchZero(Neq(Load(a), b)) */
protected abstract boolean visitBranchEq2Load1(Operation branchZero,
Instruction neq,
Instruction load);
    /** branchNeq1Load1 := BranchNonZero(Neq(Load(a), b)) */
protected abstract boolean visitBranchNeq1Load1(Operation branchNonZero,
Instruction neq,
Instruction load);
    /** branchNeq2Load1 := BranchZero(Eq(Load(a), b)) */
protected abstract boolean visitBranchNeq2Load1(Operation branchZero,
Instruction eq,
Instruction load);
    /** branchLTLoad1 := BranchNonZero(LessThan(Load(a), b)) */
protected abstract boolean visitBranchLTLoad1(Operation branchNonZero,
Instruction lessThan,
Instruction load);
    /** branchGELoad1 := BranchZero(LessThan(Load(a), b)) */
protected abstract boolean visitBranchGELoad1(Operation branchZero,
Instruction lessThan,
Instruction load);
    /** branchLELoad1 := BranchNonZero(LessThanEq(Load(a), b)) */
protected abstract boolean visitBranchLELoad1(Operation branchNonZero,
Instruction lessThanEq,
Instruction load);
    /** branchGTLoad1 := BranchZero(LessThanEq(Load(a), b)) */
protected abstract boolean visitBranchGTLoad1(Operation branchZero,
Instruction lessThanEq,
Instruction load);
    /** branchULTLoad1 := BranchNonZero(ULessThan(Load(a), b)) */
protected abstract boolean visitBranchULTLoad1(Operation branchNonZero,
Instruction uLessThan,
Instruction load);
    /** branchUGELoad1 := BranchZero(ULessThan(Load(a), b)) */
protected abstract boolean visitBranchUGELoad1(Operation branchZero,
Instruction uLessThan,
Instruction load);
    /** branchULELoad1 := BranchNonZero(ULessThanEq(Load(a), b)) */
protected abstract boolean visitBranchULELoad1(Operation branchNonZero,
Instruction uLessThanEq,
Instruction load);
    /** branchUGTLoad1 := BranchZero(ULessThanEq(Load(a), b)) */
protected abstract boolean visitBranchUGTLoad1(Operation branchZero,
Instruction uLessThanEq,
Instruction load);
    /** branchCASSucc5 := BranchNonZero(Eq(b, StrongLoadCAS(a, b, c))) */
protected abstract boolean visitBranchCASSucc5(Operation branchNonZero,
Instruction eq,
Instruction strongLoadCAS);
    /** branchCASFail5 := BranchZero(Eq(b, StrongLoadCAS(a, b, c))) */
protected abstract boolean visitBranchCASFail5(Operation branchZero,
Instruction eq,
Instruction strongLoadCAS);
    /** branchCASSucc6 := BranchZero(Neq(b, StrongLoadCAS(a, b, c))) */
protected abstract boolean visitBranchCASSucc6(Operation branchZero,
Instruction neq,
Instruction strongLoadCAS);
    /** branchCASFail6 := BranchNonZero(Neq(b, StrongLoadCAS(a, b, c))) */
protected abstract boolean visitBranchCASFail6(Operation branchNonZero,
Instruction neq,
Instruction strongLoadCAS);
    /** branchEq1Load2 := BranchNonZero(Eq(a, Load(b))) */
protected abstract boolean visitBranchEq1Load2(Operation branchNonZero,
Instruction eq,
Instruction load);
    /** branchEq2Load2 := BranchZero(Neq(a, Load(b))) */
protected abstract boolean visitBranchEq2Load2(Operation branchZero,
Instruction neq,
Instruction load);
    /** branchNeq1Load2 := BranchNonZero(Neq(a, Load(b))) */
protected abstract boolean visitBranchNeq1Load2(Operation branchNonZero,
Instruction neq,
Instruction load);
    /** branchNeq2Load2 := BranchZero(Eq(a, Load(b))) */
protected abstract boolean visitBranchNeq2Load2(Operation branchZero,
Instruction eq,
Instruction load);
    /** branchLTLoad2 := BranchNonZero(LessThan(a, Load(b))) */
protected abstract boolean visitBranchLTLoad2(Operation branchNonZero,
Instruction lessThan,
Instruction load);
    /** branchGELoad2 := BranchZero(LessThan(a, Load(b))) */
protected abstract boolean visitBranchGELoad2(Operation branchZero,
Instruction lessThan,
Instruction load);
    /** branchLELoad2 := BranchNonZero(LessThanEq(a, Load(b))) */
protected abstract boolean visitBranchLELoad2(Operation branchNonZero,
Instruction lessThanEq,
Instruction load);
    /** branchGTLoad2 := BranchZero(LessThanEq(a, Load(b))) */
protected abstract boolean visitBranchGTLoad2(Operation branchZero,
Instruction lessThanEq,
Instruction load);
    /** branchULTLoad2 := BranchNonZero(ULessThan(a, Load(b))) */
protected abstract boolean visitBranchULTLoad2(Operation branchNonZero,
Instruction uLessThan,
Instruction load);
    /** branchUGELoad2 := BranchZero(ULessThan(a, Load(b))) */
protected abstract boolean visitBranchUGELoad2(Operation branchZero,
Instruction uLessThan,
Instruction load);
    /** branchULELoad2 := BranchNonZero(ULessThanEq(a, Load(b))) */
protected abstract boolean visitBranchULELoad2(Operation branchNonZero,
Instruction uLessThanEq,
Instruction load);
    /** branchUGTLoad2 := BranchZero(ULessThanEq(a, Load(b))) */
protected abstract boolean visitBranchUGTLoad2(Operation branchZero,
Instruction uLessThanEq,
Instruction load);
    /** branchEq1 := BranchNonZero(Eq(a, b)) */
protected abstract boolean visitBranchEq1(Operation branchNonZero,
Instruction eq);
    /** branchEq2 := BranchZero(Neq(a, b)) */
protected abstract boolean visitBranchEq2(Operation branchZero,
Instruction neq);
    /** branchNeq1 := BranchNonZero(Neq(a, b)) */
protected abstract boolean visitBranchNeq1(Operation branchNonZero,
Instruction neq);
    /** branchNeq2 := BranchZero(Eq(a, b)) */
protected abstract boolean visitBranchNeq2(Operation branchZero,
Instruction eq);
    /** branchLT := BranchNonZero(LessThan(a, b)) */
protected abstract boolean visitBranchLT(Operation branchNonZero,
Instruction lessThan);
    /** branchGE := BranchZero(LessThan(a, b)) */
protected abstract boolean visitBranchGE(Operation branchZero,
Instruction lessThan);
    /** branchLE := BranchNonZero(LessThanEq(a, b)) */
protected abstract boolean visitBranchLE(Operation branchNonZero,
Instruction lessThanEq);
    /** branchGT := BranchZero(LessThanEq(a, b)) */
protected abstract boolean visitBranchGT(Operation branchZero,
Instruction lessThanEq);
    /** branchULT := BranchNonZero(ULessThan(a, b)) */
protected abstract boolean visitBranchULT(Operation branchNonZero,
Instruction uLessThan);
    /** branchUGE := BranchZero(ULessThan(a, b)) */
protected abstract boolean visitBranchUGE(Operation branchZero,
Instruction uLessThan);
    /** branchULE := BranchNonZero(ULessThanEq(a, b)) */
protected abstract boolean visitBranchULE(Operation branchNonZero,
Instruction uLessThanEq);
    /** branchUGT := BranchZero(ULessThanEq(a, b)) */
protected abstract boolean visitBranchUGT(Operation branchZero,
Instruction uLessThanEq);
    /** branchNZLoad := BranchNonZero(Load(a)) */
protected abstract boolean visitBranchNZLoad(Operation branchNonZero,
Instruction load);
    /** branchZLoad := BranchZero(Load(a)) */
protected abstract boolean visitBranchZLoad(Operation branchZero,
Instruction load);
    /** branchNonZero := BranchNonZero(a) */
protected abstract boolean visitBranchNonZero(Operation branchNonZero);
    /** branchZero := BranchZero(a) */
protected abstract boolean visitBranchZero(Operation branchZero);
    /** eqLoad1 := Eq(Load(a), b) */
protected abstract boolean visitEqLoad1(Operation eq,
Instruction load);
    /** eqLoad2 := Eq(a, Load(b)) */
protected abstract boolean visitEqLoad2(Operation eq,
Instruction load);
    /** eq := Eq(a, b) */
protected abstract boolean visitEq(Operation eq);
    /** neqLoad1 := Neq(Load(a), b) */
protected abstract boolean visitNeqLoad1(Operation neq,
Instruction load);
    /** neqLoad2 := Neq(a, Load(b)) */
protected abstract boolean visitNeqLoad2(Operation neq,
Instruction load);
    /** neq := Neq(a, b) */
protected abstract boolean visitNeq(Operation neq);
    /** lessThanLoad1 := LessThan(Load(a), b) */
protected abstract boolean visitLessThanLoad1(Operation lessThan,
Instruction load);
    /** lessThanLoad2 := LessThan(a, Load(b)) */
protected abstract boolean visitLessThanLoad2(Operation lessThan,
Instruction load);
    /** lessThan := LessThan(a, b) */
protected abstract boolean visitLessThan(Operation lessThan);
    /** uLessThanLoad1 := ULessThan(Load(a), b) */
protected abstract boolean visitULessThanLoad1(Operation uLessThan,
Instruction load);
    /** uLessThanLoad2 := ULessThan(a, Load(b)) */
protected abstract boolean visitULessThanLoad2(Operation uLessThan,
Instruction load);
    /** uLessThan := ULessThan(a, b) */
protected abstract boolean visitULessThan(Operation uLessThan);
    /** lessThanEqLoad1 := LessThanEq(Load(a), b) */
protected abstract boolean visitLessThanEqLoad1(Operation lessThanEq,
Instruction load);
    /** lessThanEqLoad2 := LessThanEq(a, Load(b)) */
protected abstract boolean visitLessThanEqLoad2(Operation lessThanEq,
Instruction load);
    /** lessThanEq := LessThanEq(a, b) */
protected abstract boolean visitLessThanEq(Operation lessThanEq);
    /** uLessThanEqLoad1 := ULessThanEq(Load(a), b) */
protected abstract boolean visitULessThanEqLoad1(Operation uLessThanEq,
Instruction load);
    /** uLessThanEqLoad2 := ULessThanEq(a, Load(b)) */
protected abstract boolean visitULessThanEqLoad2(Operation uLessThanEq,
Instruction load);
    /** uLessThanEq := ULessThanEq(a, b) */
protected abstract boolean visitULessThanEq(Operation uLessThanEq);
    /** notLessThanLoad1 := Not(LessThan(Load(a), b)) */
protected abstract boolean visitNotLessThanLoad1(Operation not,
Instruction lessThan,
Instruction load);
    /** notLessThanLoad2 := Not(LessThan(a, Load(b))) */
protected abstract boolean visitNotLessThanLoad2(Operation not,
Instruction lessThan,
Instruction load);
    /** notLessThan := Not(LessThan(a, b)) */
protected abstract boolean visitNotLessThan(Operation not,
Instruction lessThan);
    /** notLessThanEqLoad1 := Not(LessThanEq(Load(a), b)) */
protected abstract boolean visitNotLessThanEqLoad1(Operation not,
Instruction lessThanEq,
Instruction load);
    /** notLessThanEqLoad2 := Not(LessThanEq(a, Load(b))) */
protected abstract boolean visitNotLessThanEqLoad2(Operation not,
Instruction lessThanEq,
Instruction load);
    /** notLessThanEq := Not(LessThanEq(a, b)) */
protected abstract boolean visitNotLessThanEq(Operation not,
Instruction lessThanEq);
    /** not := Not(a) */
protected abstract boolean visitNot(Operation not);
    /** memcpy := Memcpy(a, b, c) */
protected abstract boolean visitMemcpy(Operation memcpy);
    /** call := Call() */
protected abstract boolean visitCall(Operation call);
    /** callIndirectLoad := CallIndirect(Load(a)) */
protected abstract boolean visitCallIndirectLoad(Operation callIndirect,
Instruction load);
    /** callIndirect := CallIndirect(a) */
protected abstract boolean visitCallIndirect(Operation callIndirect);
    /** rawReturn := RawReturn() */
protected abstract boolean visitRawReturn(Operation rawReturn);
    /** notReached := NotReached() */
protected abstract boolean visitNotReached(Operation notReached);
    /** jump := Jump() */
protected abstract boolean visitJump(Operation jump);
    /** awesomeJumpLoad := AwesomeJump(Load(a)) */
protected abstract boolean visitAwesomeJumpLoad(Operation awesomeJump,
Instruction load);
    /** awesomeJump := AwesomeJump(a) */
protected abstract boolean visitAwesomeJump(Operation awesomeJump);
    /** mov := Mov(a) */
protected abstract boolean visitMov(Operation mov);
    /** phi := Phi(a) */
protected abstract boolean visitPhi(Operation phi);
    /** ipsilon := Ipsilon(a) */
protected abstract boolean visitIpsilon(Operation ipsilon);
    /** fence := Fence() */
protected abstract boolean visitFence(Operation fence);
    /** hardCompilerFence := HardCompilerFence() */
protected abstract boolean visitHardCompilerFence(Operation hardCompilerFence);
    /** hardUse := HardUse(a) */
protected abstract boolean visitHardUse(Operation hardUse);

private boolean __handleStore(Operation o,int numOpVars) {
Arg __tmp1=o.rhs(1);
if (__tmp1 instanceof Var) {
Var __tmp2=(Var)__tmp1;
Instruction __tmp3=findInstruction(__tmp2);
if (__tmp3!=null) {
opVars[numOpVars+0]=__tmp2;
switch (__tmp3.opcode()) {
case Add: {
Arg __tmp4=__tmp3.rhs(0);
if (__tmp4 instanceof Var) {
Var __tmp5=(Var)__tmp4;
Instruction __tmp6=findInstruction(__tmp5);
if (__tmp6!=null) {
opVars[numOpVars+1]=__tmp5;
switch (__tmp6.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp7=o.rhs(0);
if (argsEqual(__tmp7,__tmp6.rhs(0))) {
if (visitLoadAddStore1(o,
__tmp3,
__tmp6)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp6);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp8=__tmp3.rhs(1);
if (__tmp8 instanceof Var) {
Var __tmp9=(Var)__tmp8;
Instruction __tmp10=findInstruction(__tmp9);
if (__tmp10!=null) {
opVars[numOpVars+1]=__tmp9;
switch (__tmp10.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp11=o.rhs(0);
if (argsEqual(__tmp11,__tmp10.rhs(0))) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Store(a, Add(!%b, Load(a)))' is not a variable in: "+__tmp3);
}
if (visitLoadAddStore2(o,
__tmp3,
__tmp10)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp10);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Sub: {
Arg __tmp12=__tmp3.rhs(0);
if (__tmp12 instanceof Var) {
Var __tmp13=(Var)__tmp12;
Instruction __tmp14=findInstruction(__tmp13);
if (__tmp14!=null) {
opVars[numOpVars+1]=__tmp13;
switch (__tmp14.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp15=o.rhs(0);
if (argsEqual(__tmp15,__tmp14.rhs(0))) {
if (visitLoadSubStore(o,
__tmp3,
__tmp14)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp14);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Neg: {
Arg __tmp16=__tmp3.rhs(0);
if (__tmp16 instanceof Var) {
Var __tmp17=(Var)__tmp16;
Instruction __tmp18=findInstruction(__tmp17);
if (__tmp18!=null) {
opVars[numOpVars+1]=__tmp17;
switch (__tmp18.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp19=o.rhs(0);
if (argsEqual(__tmp19,__tmp18.rhs(0))) {
if (visitLoadNegStore(o,
__tmp3,
__tmp18)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp18);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Shl: {
Arg __tmp20=__tmp3.rhs(0);
if (__tmp20 instanceof Var) {
Var __tmp21=(Var)__tmp20;
Instruction __tmp22=findInstruction(__tmp21);
if (__tmp22!=null) {
opVars[numOpVars+1]=__tmp21;
switch (__tmp22.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp23=o.rhs(0);
if (argsEqual(__tmp23,__tmp22.rhs(0))) {
if (visitLoadShlStore(o,
__tmp3,
__tmp22)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp22);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Shr: {
Arg __tmp24=__tmp3.rhs(0);
if (__tmp24 instanceof Var) {
Var __tmp25=(Var)__tmp24;
Instruction __tmp26=findInstruction(__tmp25);
if (__tmp26!=null) {
opVars[numOpVars+1]=__tmp25;
switch (__tmp26.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp27=o.rhs(0);
if (argsEqual(__tmp27,__tmp26.rhs(0))) {
if (visitLoadShrStore(o,
__tmp3,
__tmp26)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp26);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Ushr: {
Arg __tmp28=__tmp3.rhs(0);
if (__tmp28 instanceof Var) {
Var __tmp29=(Var)__tmp28;
Instruction __tmp30=findInstruction(__tmp29);
if (__tmp30!=null) {
opVars[numOpVars+1]=__tmp29;
switch (__tmp30.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp31=o.rhs(0);
if (argsEqual(__tmp31,__tmp30.rhs(0))) {
if (visitLoadUshrStore(o,
__tmp3,
__tmp30)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp30);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Or: {
Arg __tmp32=__tmp3.rhs(0);
if (__tmp32 instanceof Var) {
Var __tmp33=(Var)__tmp32;
Instruction __tmp34=findInstruction(__tmp33);
if (__tmp34!=null) {
opVars[numOpVars+1]=__tmp33;
switch (__tmp34.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp35=o.rhs(0);
if (argsEqual(__tmp35,__tmp34.rhs(0))) {
if (visitLoadOrStore1(o,
__tmp3,
__tmp34)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp34);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp36=__tmp3.rhs(1);
if (__tmp36 instanceof Var) {
Var __tmp37=(Var)__tmp36;
Instruction __tmp38=findInstruction(__tmp37);
if (__tmp38!=null) {
opVars[numOpVars+1]=__tmp37;
switch (__tmp38.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp39=o.rhs(0);
if (argsEqual(__tmp39,__tmp38.rhs(0))) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Store(a, Or(!%b, Load(a)))' is not a variable in: "+__tmp3);
}
if (visitLoadOrStore2(o,
__tmp3,
__tmp38)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp38);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case Xor: {
Arg __tmp40=__tmp3.rhs(0);
if (__tmp40 instanceof Var) {
Var __tmp41=(Var)__tmp40;
Instruction __tmp42=findInstruction(__tmp41);
if (__tmp42!=null) {
opVars[numOpVars+1]=__tmp41;
switch (__tmp42.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp43=o.rhs(0);
if (argsEqual(__tmp43,__tmp42.rhs(0))) {
if (visitLoadXorStore1(o,
__tmp3,
__tmp42)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp42);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp44=__tmp3.rhs(1);
if (__tmp44 instanceof Var) {
Var __tmp45=(Var)__tmp44;
Instruction __tmp46=findInstruction(__tmp45);
if (__tmp46!=null) {
opVars[numOpVars+1]=__tmp45;
switch (__tmp46.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp47=o.rhs(0);
if (argsEqual(__tmp47,__tmp46.rhs(0))) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Store(a, Xor(!%b, Load(a)))' is not a variable in: "+__tmp3);
}
if (visitLoadXorStore2(o,
__tmp3,
__tmp46)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp46);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case And: {
Arg __tmp48=__tmp3.rhs(0);
if (__tmp48 instanceof Var) {
Var __tmp49=(Var)__tmp48;
Instruction __tmp50=findInstruction(__tmp49);
if (__tmp50!=null) {
opVars[numOpVars+1]=__tmp49;
switch (__tmp50.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp51=o.rhs(0);
if (argsEqual(__tmp51,__tmp50.rhs(0))) {
if (visitLoadAndStore1(o,
__tmp3,
__tmp50)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp50);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp52=__tmp3.rhs(1);
if (__tmp52 instanceof Var) {
Var __tmp53=(Var)__tmp52;
Instruction __tmp54=findInstruction(__tmp53);
if (__tmp54!=null) {
opVars[numOpVars+1]=__tmp53;
switch (__tmp54.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp55=o.rhs(0);
if (argsEqual(__tmp55,__tmp54.rhs(0))) {
if (!(__tmp3.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Store(a, And(!%b, Load(a)))' is not a variable in: "+__tmp3);
}
if (visitLoadAndStore2(o,
__tmp3,
__tmp54)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp54);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
case BitNot: {
Arg __tmp56=__tmp3.rhs(0);
if (__tmp56 instanceof Var) {
Var __tmp57=(Var)__tmp56;
Instruction __tmp58=findInstruction(__tmp57);
if (__tmp58!=null) {
opVars[numOpVars+1]=__tmp57;
switch (__tmp58.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
Arg __tmp59=o.rhs(0);
if (argsEqual(__tmp59,__tmp58.rhs(0))) {
if (visitLoadBitNotStore(o,
__tmp3,
__tmp58)) {
acceptedOperation(o);
acceptedOperation(__tmp3);
acceptedOperation(__tmp58);
return true;
}
}
break;
}
default: break;
}
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitStore(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleAdd(Operation o,int numOpVars) {
Arg __tmp60=o.rhs(0);
if (__tmp60 instanceof Var) {
Var __tmp61=(Var)__tmp60;
Instruction __tmp62=findInstruction(__tmp61);
if (__tmp62!=null) {
opVars[numOpVars+0]=__tmp61;
switch (__tmp62.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadAdd1(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
break;
}
case GetCVarAddress: {
this.numOpVars=numOpVars+1;
if (visitAddCVar(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
break;
}
case Add: {
Arg __tmp63=__tmp62.rhs(0);
if (__tmp63 instanceof Var) {
Var __tmp64=(Var)__tmp63;
Instruction __tmp65=findInstruction(__tmp64);
if (__tmp65!=null) {
opVars[numOpVars+1]=__tmp64;
switch (__tmp65.opcode()) {
case GetCVarAddress: {
this.numOpVars=numOpVars+2;
if (o.rhs(1) instanceof Arg.IntConst) {
if (__tmp62.rhs(1) instanceof Var) {
if (visitAddAddCVar(o,
__tmp62,
__tmp65)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
acceptedOperation(__tmp65);
return true;
}
}
}
break;
}
case Add: {
this.numOpVars=numOpVars+2;
if (__tmp65.rhs(1) instanceof Arg.IntConst &&
__tmp62.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp65.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(add3=Add(!%a, $b), $c), $d)' is not a variable in: "+__tmp65);
}
if (visitAddAddAdd(o,
__tmp62,
__tmp65)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
acceptedOperation(__tmp65);
return true;
}
}
break;
}
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp65.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (__tmp62.rhs(1) instanceof Var) {
if (!(__tmp65.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(Shl(!%a, $b), %c), $d)' is not a variable in: "+__tmp65);
}
if (visitAddAddShl1(o,
__tmp62,
__tmp65)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
acceptedOperation(__tmp65);
return true;
}
}
}
break;
}
default: break;
}
}
}
Arg __tmp66=__tmp62.rhs(1);
if (__tmp66 instanceof Var) {
Var __tmp67=(Var)__tmp66;
Instruction __tmp68=findInstruction(__tmp67);
if (__tmp68!=null) {
opVars[numOpVars+1]=__tmp67;
switch (__tmp68.opcode()) {
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp68.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d)' is not a variable in: "+__tmp62);
}
if (!(__tmp68.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'add1=Add(add2=Add(!%a, Shl(!%b, $c)), $d)' is not a variable in: "+__tmp68);
}
if (visitAddAddShl2(o,
__tmp62,
__tmp68)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
acceptedOperation(__tmp68);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp69=o.rhs(1);
if (__tmp69 instanceof Var) {
Var __tmp70=(Var)__tmp69;
Instruction __tmp71=findInstruction(__tmp70);
if (__tmp71!=null) {
opVars[numOpVars+1]=__tmp70;
switch (__tmp71.opcode()) {
case Shl: {
this.numOpVars=numOpVars+2;
if (__tmp62.rhs(1) instanceof Arg.IntConst &&
__tmp71.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, $b), Shl(!%c, $d))' is not a variable in: "+__tmp62);
}
if (!(__tmp71.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%c' to 'add1=Add(add2=Add(!%a, $b), Shl(!%c, $d))' is not a variable in: "+__tmp71);
}
if (visitAddAddShl3(o,
__tmp62,
__tmp71)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
acceptedOperation(__tmp71);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1) instanceof Arg.IntConst) {
if (__tmp62.rhs(1) instanceof Var) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, %b), $c)' is not a variable in: "+__tmp62);
}
if (visitAddAdd1(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
}
}
this.numOpVars=numOpVars+1;
if (__tmp62.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'add1=Add(add2=Add(!%a, $b), $c)' is not a variable in: "+__tmp62);
}
if (visitAddAdd2(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
}
break;
}
case GetCArgAddress: {
this.numOpVars=numOpVars+1;
if (o.rhs(1) instanceof Arg.IntConst) {
if (visitAddCArg(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
}
break;
}
case Shl: {
this.numOpVars=numOpVars+1;
if (__tmp62.rhs(1) instanceof Arg.IntConst &&
o.rhs(1) instanceof Arg.IntConst) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(Shl(!%a, $b), $c)' is not a variable in: "+__tmp62);
}
if (visitAddShl1(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
}
this.numOpVars=numOpVars+1;
if (__tmp62.rhs(1) instanceof Arg.IntConst) {
if (o.rhs(1) instanceof Var) {
if (!(__tmp62.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(Shl(!%a, $b), %c)' is not a variable in: "+__tmp62);
}
if (visitAddShl2(o,
__tmp62)) {
acceptedOperation(o);
acceptedOperation(__tmp62);
return true;
}
}
}
break;
}
default: break;
}
}
}
Arg __tmp72=o.rhs(1);
if (__tmp72 instanceof Var) {
Var __tmp73=(Var)__tmp72;
Instruction __tmp74=findInstruction(__tmp73);
if (__tmp74!=null) {
opVars[numOpVars+0]=__tmp73;
switch (__tmp74.opcode()) {
case Shl: {
this.numOpVars=numOpVars+1;
if (__tmp74.rhs(1) instanceof Arg.IntConst) {
if (!(o.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(!%a, Shl(!%b, $c))' is not a variable in: "+o);
}
if (!(__tmp74.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%b' to 'Add(!%a, Shl(!%b, $c))' is not a variable in: "+__tmp74);
}
if (visitAddShl3(o,
__tmp74)) {
acceptedOperation(o);
acceptedOperation(__tmp74);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitAdd(o)) {
acceptedOperation(o);
return true;
}
Arg __tmp75=o.rhs(1);
if (__tmp75 instanceof Var) {
Var __tmp76=(Var)__tmp75;
Instruction __tmp77=findInstruction(__tmp76);
if (__tmp77!=null) {
opVars[numOpVars+0]=__tmp76;
switch (__tmp77.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (!(o.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Add(!%a, Load(b))' is not a variable in: "+o);
}
if (visitLoadAdd2(o,
__tmp77)) {
acceptedOperation(o);
acceptedOperation(__tmp77);
return true;
}
break;
}
default: break;
}
}
}
return false;
}
private boolean __handleMul(Operation o,int numOpVars) {
Arg __tmp78=o.rhs(0);
if (__tmp78 instanceof Var) {
Var __tmp79=(Var)__tmp78;
Instruction __tmp80=findInstruction(__tmp79);
if (__tmp80!=null) {
opVars[numOpVars+0]=__tmp79;
switch (__tmp80.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadMul1(o,
__tmp80)) {
acceptedOperation(o);
acceptedOperation(__tmp80);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp81=o.rhs(1);
if (__tmp81 instanceof Var) {
Var __tmp82=(Var)__tmp81;
Instruction __tmp83=findInstruction(__tmp82);
if (__tmp83!=null) {
opVars[numOpVars+0]=__tmp82;
switch (__tmp83.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (!(o.rhs(0) instanceof Var)) {
throw new CompilerException("Argument '!%a' to 'Mul(!%a, Load(b))' is not a variable in: "+o);
}
if (visitLoadMul2(o,
__tmp83)) {
acceptedOperation(o);
acceptedOperation(__tmp83);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitMul(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleGetCVarAddress(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitCVar(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleGetCArgAddress(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitCArg(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleSub(Operation o,int numOpVars) {
Arg __tmp84=o.rhs(1);
if (__tmp84 instanceof Var) {
Var __tmp85=(Var)__tmp84;
Instruction __tmp86=findInstruction(__tmp85);
if (__tmp86!=null) {
opVars[numOpVars+0]=__tmp85;
switch (__tmp86.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadSub(o,
__tmp86)) {
acceptedOperation(o);
acceptedOperation(__tmp86);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitSub(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleDiv(Operation o,int numOpVars) {
Arg __tmp87=o.rhs(1);
if (__tmp87 instanceof Var) {
Var __tmp88=(Var)__tmp87;
Instruction __tmp89=findInstruction(__tmp88);
if (__tmp89!=null) {
opVars[numOpVars+0]=__tmp88;
switch (__tmp89.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadDiv(o,
__tmp89)) {
acceptedOperation(o);
acceptedOperation(__tmp89);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitDiv(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleMod(Operation o,int numOpVars) {
Arg __tmp90=o.rhs(1);
if (__tmp90 instanceof Var) {
Var __tmp91=(Var)__tmp90;
Instruction __tmp92=findInstruction(__tmp91);
if (__tmp92!=null) {
opVars[numOpVars+0]=__tmp91;
switch (__tmp92.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadMod(o,
__tmp92)) {
acceptedOperation(o);
acceptedOperation(__tmp92);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitMod(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleOr(Operation o,int numOpVars) {
Arg __tmp93=o.rhs(0);
if (__tmp93 instanceof Var) {
Var __tmp94=(Var)__tmp93;
Instruction __tmp95=findInstruction(__tmp94);
if (__tmp95!=null) {
opVars[numOpVars+0]=__tmp94;
switch (__tmp95.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadOr1(o,
__tmp95)) {
acceptedOperation(o);
acceptedOperation(__tmp95);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp96=o.rhs(1);
if (__tmp96 instanceof Var) {
Var __tmp97=(Var)__tmp96;
Instruction __tmp98=findInstruction(__tmp97);
if (__tmp98!=null) {
opVars[numOpVars+0]=__tmp97;
switch (__tmp98.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadOr2(o,
__tmp98)) {
acceptedOperation(o);
acceptedOperation(__tmp98);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitOr(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleXor(Operation o,int numOpVars) {
Arg __tmp99=o.rhs(0);
if (__tmp99 instanceof Var) {
Var __tmp100=(Var)__tmp99;
Instruction __tmp101=findInstruction(__tmp100);
if (__tmp101!=null) {
opVars[numOpVars+0]=__tmp100;
switch (__tmp101.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadXor1(o,
__tmp101)) {
acceptedOperation(o);
acceptedOperation(__tmp101);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp102=o.rhs(1);
if (__tmp102 instanceof Var) {
Var __tmp103=(Var)__tmp102;
Instruction __tmp104=findInstruction(__tmp103);
if (__tmp104!=null) {
opVars[numOpVars+0]=__tmp103;
switch (__tmp104.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadXor2(o,
__tmp104)) {
acceptedOperation(o);
acceptedOperation(__tmp104);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitXor(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleAnd(Operation o,int numOpVars) {
Arg __tmp105=o.rhs(0);
if (__tmp105 instanceof Var) {
Var __tmp106=(Var)__tmp105;
Instruction __tmp107=findInstruction(__tmp106);
if (__tmp107!=null) {
opVars[numOpVars+0]=__tmp106;
switch (__tmp107.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadAnd1(o,
__tmp107)) {
acceptedOperation(o);
acceptedOperation(__tmp107);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp108=o.rhs(1);
if (__tmp108 instanceof Var) {
Var __tmp109=(Var)__tmp108;
Instruction __tmp110=findInstruction(__tmp109);
if (__tmp110!=null) {
opVars[numOpVars+0]=__tmp109;
switch (__tmp110.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadAnd2(o,
__tmp110)) {
acceptedOperation(o);
acceptedOperation(__tmp110);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitAnd(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleNot(Operation o,int numOpVars) {
Arg __tmp111=o.rhs(0);
if (__tmp111 instanceof Var) {
Var __tmp112=(Var)__tmp111;
Instruction __tmp113=findInstruction(__tmp112);
if (__tmp113!=null) {
opVars[numOpVars+0]=__tmp112;
switch (__tmp113.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadNot(o,
__tmp113)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
return true;
}
break;
}
case And: {
Arg __tmp114=__tmp113.rhs(0);
if (__tmp114 instanceof Var) {
Var __tmp115=(Var)__tmp114;
Instruction __tmp116=findInstruction(__tmp115);
if (__tmp116!=null) {
opVars[numOpVars+1]=__tmp115;
switch (__tmp116.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotAndLoad1(o,
__tmp113,
__tmp116)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp116);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp117=__tmp113.rhs(1);
if (__tmp117 instanceof Var) {
Var __tmp118=(Var)__tmp117;
Instruction __tmp119=findInstruction(__tmp118);
if (__tmp119!=null) {
opVars[numOpVars+1]=__tmp118;
switch (__tmp119.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotAndLoad2(o,
__tmp113,
__tmp119)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp119);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitNotAnd(o,
__tmp113)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
return true;
}
break;
}
case LessThan: {
Arg __tmp120=__tmp113.rhs(0);
if (__tmp120 instanceof Var) {
Var __tmp121=(Var)__tmp120;
Instruction __tmp122=findInstruction(__tmp121);
if (__tmp122!=null) {
opVars[numOpVars+1]=__tmp121;
switch (__tmp122.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotLessThanLoad1(o,
__tmp113,
__tmp122)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp122);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp123=__tmp113.rhs(1);
if (__tmp123 instanceof Var) {
Var __tmp124=(Var)__tmp123;
Instruction __tmp125=findInstruction(__tmp124);
if (__tmp125!=null) {
opVars[numOpVars+1]=__tmp124;
switch (__tmp125.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotLessThanLoad2(o,
__tmp113,
__tmp125)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp125);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitNotLessThan(o,
__tmp113)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
return true;
}
break;
}
case LessThanEq: {
Arg __tmp126=__tmp113.rhs(0);
if (__tmp126 instanceof Var) {
Var __tmp127=(Var)__tmp126;
Instruction __tmp128=findInstruction(__tmp127);
if (__tmp128!=null) {
opVars[numOpVars+1]=__tmp127;
switch (__tmp128.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotLessThanEqLoad1(o,
__tmp113,
__tmp128)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp128);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp129=__tmp113.rhs(1);
if (__tmp129 instanceof Var) {
Var __tmp130=(Var)__tmp129;
Instruction __tmp131=findInstruction(__tmp130);
if (__tmp131!=null) {
opVars[numOpVars+1]=__tmp130;
switch (__tmp131.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitNotLessThanEqLoad2(o,
__tmp113,
__tmp131)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
acceptedOperation(__tmp131);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitNotLessThanEq(o,
__tmp113)) {
acceptedOperation(o);
acceptedOperation(__tmp113);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitNot(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleBoolify(Operation o,int numOpVars) {
Arg __tmp132=o.rhs(0);
if (__tmp132 instanceof Var) {
Var __tmp133=(Var)__tmp132;
Instruction __tmp134=findInstruction(__tmp133);
if (__tmp134!=null) {
opVars[numOpVars+0]=__tmp133;
switch (__tmp134.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadBoolify(o,
__tmp134)) {
acceptedOperation(o);
acceptedOperation(__tmp134);
return true;
}
break;
}
case And: {
Arg __tmp135=__tmp134.rhs(0);
if (__tmp135 instanceof Var) {
Var __tmp136=(Var)__tmp135;
Instruction __tmp137=findInstruction(__tmp136);
if (__tmp137!=null) {
opVars[numOpVars+1]=__tmp136;
switch (__tmp137.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBoolifyAndLoad1(o,
__tmp134,
__tmp137)) {
acceptedOperation(o);
acceptedOperation(__tmp134);
acceptedOperation(__tmp137);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp138=__tmp134.rhs(1);
if (__tmp138 instanceof Var) {
Var __tmp139=(Var)__tmp138;
Instruction __tmp140=findInstruction(__tmp139);
if (__tmp140!=null) {
opVars[numOpVars+1]=__tmp139;
switch (__tmp140.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBoolifyAndLoad2(o,
__tmp134,
__tmp140)) {
acceptedOperation(o);
acceptedOperation(__tmp134);
acceptedOperation(__tmp140);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBoolifyAnd(o,
__tmp134)) {
acceptedOperation(o);
acceptedOperation(__tmp134);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitBoolify(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleSqrt(Operation o,int numOpVars) {
Arg __tmp141=o.rhs(0);
if (__tmp141 instanceof Var) {
Var __tmp142=(Var)__tmp141;
Instruction __tmp143=findInstruction(__tmp142);
if (__tmp143!=null) {
opVars[numOpVars+0]=__tmp142;
switch (__tmp143.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLoadSqrt(o,
__tmp143)) {
acceptedOperation(o);
acceptedOperation(__tmp143);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitSqrt(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleLoad(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitLoad(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleStrongLoadCAS(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitStrongLoadCAS(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleStrongCAS(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitStrongCAS(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleStrongVoidCAS(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitStrongVoidCAS(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleWeakCAS(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitWeakCAS(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleEq(Operation o,int numOpVars) {
Arg __tmp144=o.rhs(0);
if (__tmp144 instanceof Var) {
Var __tmp145=(Var)__tmp144;
Instruction __tmp146=findInstruction(__tmp145);
if (__tmp146!=null) {
opVars[numOpVars+0]=__tmp145;
switch (__tmp146.opcode()) {
case And: {
Arg __tmp147=__tmp146.rhs(0);
if (__tmp147 instanceof Var) {
Var __tmp148=(Var)__tmp147;
Instruction __tmp149=findInstruction(__tmp148);
if (__tmp149!=null) {
opVars[numOpVars+1]=__tmp148;
switch (__tmp149.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (o.rhs(1).equals(0)) {
if (visitEqZeroAndLoad1(o,
__tmp146,
__tmp149)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
acceptedOperation(__tmp149);
return true;
}
}
this.numOpVars=numOpVars+2;
Arg __tmp150=__tmp146.rhs(1);
if (argsEqual(__tmp150,o.rhs(1))) {
if (__tmp146.rhs(1) instanceof Arg.IntConst) {
if (visitEqContentsAndLoad(o,
__tmp146,
__tmp149)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
acceptedOperation(__tmp149);
return true;
}
}
}
break;
}
default: break;
}
}
}
Arg __tmp151=__tmp146.rhs(1);
if (__tmp151 instanceof Var) {
Var __tmp152=(Var)__tmp151;
Instruction __tmp153=findInstruction(__tmp152);
if (__tmp153!=null) {
opVars[numOpVars+1]=__tmp152;
switch (__tmp153.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (o.rhs(1).equals(0)) {
if (visitEqZeroAndLoad2(o,
__tmp146,
__tmp153)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
acceptedOperation(__tmp153);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitEqZeroAnd(o,
__tmp146)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
return true;
}
}
this.numOpVars=numOpVars+1;
Arg __tmp154=__tmp146.rhs(1);
if (argsEqual(__tmp154,o.rhs(1))) {
if (__tmp146.rhs(1) instanceof Arg.IntConst) {
if (visitEqContentsAnd(o,
__tmp146)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
return true;
}
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+1;
if (visitEqLoad1(o,
__tmp146)) {
acceptedOperation(o);
acceptedOperation(__tmp146);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp155=o.rhs(1);
if (__tmp155 instanceof Var) {
Var __tmp156=(Var)__tmp155;
Instruction __tmp157=findInstruction(__tmp156);
if (__tmp157!=null) {
opVars[numOpVars+0]=__tmp156;
switch (__tmp157.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitEqLoad2(o,
__tmp157)) {
acceptedOperation(o);
acceptedOperation(__tmp157);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitEq(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleNeq(Operation o,int numOpVars) {
Arg __tmp158=o.rhs(0);
if (__tmp158 instanceof Var) {
Var __tmp159=(Var)__tmp158;
Instruction __tmp160=findInstruction(__tmp159);
if (__tmp160!=null) {
opVars[numOpVars+0]=__tmp159;
switch (__tmp160.opcode()) {
case And: {
Arg __tmp161=__tmp160.rhs(0);
if (__tmp161 instanceof Var) {
Var __tmp162=(Var)__tmp161;
Instruction __tmp163=findInstruction(__tmp162);
if (__tmp163!=null) {
opVars[numOpVars+1]=__tmp162;
switch (__tmp163.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (o.rhs(1).equals(0)) {
if (visitNeqZeroAndLoad1(o,
__tmp160,
__tmp163)) {
acceptedOperation(o);
acceptedOperation(__tmp160);
acceptedOperation(__tmp163);
return true;
}
}
break;
}
default: break;
}
}
}
Arg __tmp164=__tmp160.rhs(1);
if (__tmp164 instanceof Var) {
Var __tmp165=(Var)__tmp164;
Instruction __tmp166=findInstruction(__tmp165);
if (__tmp166!=null) {
opVars[numOpVars+1]=__tmp165;
switch (__tmp166.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (o.rhs(1).equals(0)) {
if (visitNeqZeroAndLoad2(o,
__tmp160,
__tmp166)) {
acceptedOperation(o);
acceptedOperation(__tmp160);
acceptedOperation(__tmp166);
return true;
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (o.rhs(1).equals(0)) {
if (visitNeqZeroAnd(o,
__tmp160)) {
acceptedOperation(o);
acceptedOperation(__tmp160);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+1;
if (visitNeqLoad1(o,
__tmp160)) {
acceptedOperation(o);
acceptedOperation(__tmp160);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp167=o.rhs(1);
if (__tmp167 instanceof Var) {
Var __tmp168=(Var)__tmp167;
Instruction __tmp169=findInstruction(__tmp168);
if (__tmp169!=null) {
opVars[numOpVars+0]=__tmp168;
switch (__tmp169.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitNeqLoad2(o,
__tmp169)) {
acceptedOperation(o);
acceptedOperation(__tmp169);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitNeq(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleNeg(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitNeg(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleBitNot(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitBitNot(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleShl(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitShl(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleShr(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitShr(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleUshr(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitUshr(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleFXor(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitFXor(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleFloat0(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitFloat0(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleDouble0(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitDouble0(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleGetCArg(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitGetArg(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleCast(Operation o,int numOpVars) {
Arg __tmp170=o.rhs(0);
if (__tmp170 instanceof Var) {
Var __tmp171=(Var)__tmp170;
Instruction __tmp172=findInstruction(__tmp171);
if (__tmp172!=null) {
opVars[numOpVars+0]=__tmp171;
switch (__tmp172.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitCastLoad(o,
__tmp172)) {
acceptedOperation(o);
acceptedOperation(__tmp172);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitCast(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleFiat(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitFiat(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleIntToPointerZeroFill(Operation o,int numOpVars) {
Arg __tmp173=o.rhs(0);
if (__tmp173 instanceof Var) {
Var __tmp174=(Var)__tmp173;
Instruction __tmp175=findInstruction(__tmp174);
if (__tmp175!=null) {
opVars[numOpVars+0]=__tmp174;
switch (__tmp175.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitZeroExtendLoad(o,
__tmp175)) {
acceptedOperation(o);
acceptedOperation(__tmp175);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitZeroExtend(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleFirstHalf(Operation o,int numOpVars) {
Arg __tmp176=o.rhs(0);
if (__tmp176 instanceof Var) {
Var __tmp177=(Var)__tmp176;
Instruction __tmp178=findInstruction(__tmp177);
if (__tmp178!=null) {
opVars[numOpVars+0]=__tmp177;
switch (__tmp178.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitFirstHalfLoad(o,
__tmp178)) {
acceptedOperation(o);
acceptedOperation(__tmp178);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitFirstHalf(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleSecondHalf(Operation o,int numOpVars) {
Arg __tmp179=o.rhs(0);
if (__tmp179 instanceof Var) {
Var __tmp180=(Var)__tmp179;
Instruction __tmp181=findInstruction(__tmp180);
if (__tmp181!=null) {
opVars[numOpVars+0]=__tmp180;
switch (__tmp181.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitSecondHalfLoad(o,
__tmp181)) {
acceptedOperation(o);
acceptedOperation(__tmp181);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitSecondHalf(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleBranchNonZero(Operation o,int numOpVars) {
Arg __tmp182=o.rhs(0);
if (__tmp182 instanceof Var) {
Var __tmp183=(Var)__tmp182;
Instruction __tmp184=findInstruction(__tmp183);
if (__tmp184!=null) {
opVars[numOpVars+0]=__tmp183;
switch (__tmp184.opcode()) {
case StrongCAS: {
this.numOpVars=numOpVars+1;
if (visitBranchCASSucc1(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case WeakCAS: {
this.numOpVars=numOpVars+1;
if (visitBranchCASSucc2(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case Eq: {
Arg __tmp185=__tmp184.rhs(0);
if (__tmp185 instanceof Var) {
Var __tmp186=(Var)__tmp185;
Instruction __tmp187=findInstruction(__tmp186);
if (__tmp187!=null) {
opVars[numOpVars+1]=__tmp186;
switch (__tmp187.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp188=__tmp187.rhs(1);
if (argsEqual(__tmp188,__tmp184.rhs(1))) {
if (visitBranchCASSucc3(o,
__tmp184,
__tmp187)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp187);
return true;
}
}
break;
}
case And: {
Arg __tmp189=__tmp187.rhs(0);
if (__tmp189 instanceof Var) {
Var __tmp190=(Var)__tmp189;
Instruction __tmp191=findInstruction(__tmp190);
if (__tmp191!=null) {
opVars[numOpVars+2]=__tmp190;
switch (__tmp191.opcode()) {
case Load: {
this.numOpVars=numOpVars+3;
Arg __tmp192=__tmp187.rhs(1);
if (argsEqual(__tmp192,__tmp184.rhs(1))) {
if (__tmp187.rhs(1) instanceof Arg.IntConst) {
if (visitBranchEq1ContentsAndLoad(o,
__tmp184,
__tmp187,
__tmp191)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp187);
acceptedOperation(__tmp191);
return true;
}
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+2;
Arg __tmp193=__tmp187.rhs(1);
if (argsEqual(__tmp193,__tmp184.rhs(1))) {
if (__tmp187.rhs(1) instanceof Arg.IntConst) {
if (visitBranchEq1ContentsAnd(o,
__tmp184,
__tmp187)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp187);
return true;
}
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchEq1Load1(o,
__tmp184,
__tmp187)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp187);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp194=__tmp184.rhs(1);
if (__tmp194 instanceof Var) {
Var __tmp195=(Var)__tmp194;
Instruction __tmp196=findInstruction(__tmp195);
if (__tmp196!=null) {
opVars[numOpVars+1]=__tmp195;
switch (__tmp196.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp197=__tmp184.rhs(0);
if (argsEqual(__tmp197,__tmp196.rhs(1))) {
if (visitBranchCASSucc5(o,
__tmp184,
__tmp196)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp196);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchEq1Load2(o,
__tmp184,
__tmp196)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp196);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchEq1(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case Neq: {
Arg __tmp198=__tmp184.rhs(0);
if (__tmp198 instanceof Var) {
Var __tmp199=(Var)__tmp198;
Instruction __tmp200=findInstruction(__tmp199);
if (__tmp200!=null) {
opVars[numOpVars+1]=__tmp199;
switch (__tmp200.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp201=__tmp200.rhs(1);
if (argsEqual(__tmp201,__tmp184.rhs(1))) {
if (visitBranchCASFail4(o,
__tmp184,
__tmp200)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp200);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchNeq1Load1(o,
__tmp184,
__tmp200)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp200);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp202=__tmp184.rhs(1);
if (__tmp202 instanceof Var) {
Var __tmp203=(Var)__tmp202;
Instruction __tmp204=findInstruction(__tmp203);
if (__tmp204!=null) {
opVars[numOpVars+1]=__tmp203;
switch (__tmp204.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp205=__tmp184.rhs(0);
if (argsEqual(__tmp205,__tmp204.rhs(1))) {
if (visitBranchCASFail6(o,
__tmp184,
__tmp204)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp204);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchNeq1Load2(o,
__tmp184,
__tmp204)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp204);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchNeq1(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case And: {
Arg __tmp206=__tmp184.rhs(0);
if (__tmp206 instanceof Var) {
Var __tmp207=(Var)__tmp206;
Instruction __tmp208=findInstruction(__tmp207);
if (__tmp208!=null) {
opVars[numOpVars+1]=__tmp207;
switch (__tmp208.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchAndNotZeroLoad1(o,
__tmp184,
__tmp208)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp208);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp209=__tmp184.rhs(1);
if (__tmp209 instanceof Var) {
Var __tmp210=(Var)__tmp209;
Instruction __tmp211=findInstruction(__tmp210);
if (__tmp211!=null) {
opVars[numOpVars+1]=__tmp210;
switch (__tmp211.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchAndNotZeroLoad2(o,
__tmp184,
__tmp211)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp211);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchAndNotZero(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case LessThan: {
Arg __tmp212=__tmp184.rhs(0);
if (__tmp212 instanceof Var) {
Var __tmp213=(Var)__tmp212;
Instruction __tmp214=findInstruction(__tmp213);
if (__tmp214!=null) {
opVars[numOpVars+1]=__tmp213;
switch (__tmp214.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchLTLoad1(o,
__tmp184,
__tmp214)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp214);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp215=__tmp184.rhs(1);
if (__tmp215 instanceof Var) {
Var __tmp216=(Var)__tmp215;
Instruction __tmp217=findInstruction(__tmp216);
if (__tmp217!=null) {
opVars[numOpVars+1]=__tmp216;
switch (__tmp217.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchLTLoad2(o,
__tmp184,
__tmp217)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp217);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchLT(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case LessThanEq: {
Arg __tmp218=__tmp184.rhs(0);
if (__tmp218 instanceof Var) {
Var __tmp219=(Var)__tmp218;
Instruction __tmp220=findInstruction(__tmp219);
if (__tmp220!=null) {
opVars[numOpVars+1]=__tmp219;
switch (__tmp220.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchLELoad1(o,
__tmp184,
__tmp220)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp220);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp221=__tmp184.rhs(1);
if (__tmp221 instanceof Var) {
Var __tmp222=(Var)__tmp221;
Instruction __tmp223=findInstruction(__tmp222);
if (__tmp223!=null) {
opVars[numOpVars+1]=__tmp222;
switch (__tmp223.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchLELoad2(o,
__tmp184,
__tmp223)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp223);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchLE(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case ULessThan: {
Arg __tmp224=__tmp184.rhs(0);
if (__tmp224 instanceof Var) {
Var __tmp225=(Var)__tmp224;
Instruction __tmp226=findInstruction(__tmp225);
if (__tmp226!=null) {
opVars[numOpVars+1]=__tmp225;
switch (__tmp226.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchULTLoad1(o,
__tmp184,
__tmp226)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp226);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp227=__tmp184.rhs(1);
if (__tmp227 instanceof Var) {
Var __tmp228=(Var)__tmp227;
Instruction __tmp229=findInstruction(__tmp228);
if (__tmp229!=null) {
opVars[numOpVars+1]=__tmp228;
switch (__tmp229.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchULTLoad2(o,
__tmp184,
__tmp229)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp229);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchULT(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case ULessThanEq: {
Arg __tmp230=__tmp184.rhs(0);
if (__tmp230 instanceof Var) {
Var __tmp231=(Var)__tmp230;
Instruction __tmp232=findInstruction(__tmp231);
if (__tmp232!=null) {
opVars[numOpVars+1]=__tmp231;
switch (__tmp232.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchULELoad1(o,
__tmp184,
__tmp232)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp232);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp233=__tmp184.rhs(1);
if (__tmp233 instanceof Var) {
Var __tmp234=(Var)__tmp233;
Instruction __tmp235=findInstruction(__tmp234);
if (__tmp235!=null) {
opVars[numOpVars+1]=__tmp234;
switch (__tmp235.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchULELoad2(o,
__tmp184,
__tmp235)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
acceptedOperation(__tmp235);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchULE(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
case Load: {
this.numOpVars=numOpVars+1;
if (visitBranchNZLoad(o,
__tmp184)) {
acceptedOperation(o);
acceptedOperation(__tmp184);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitBranchNonZero(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleBranchZero(Operation o,int numOpVars) {
Arg __tmp236=o.rhs(0);
if (__tmp236 instanceof Var) {
Var __tmp237=(Var)__tmp236;
Instruction __tmp238=findInstruction(__tmp237);
if (__tmp238!=null) {
opVars[numOpVars+0]=__tmp237;
switch (__tmp238.opcode()) {
case StrongCAS: {
this.numOpVars=numOpVars+1;
if (visitBranchCASFail1(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case WeakCAS: {
this.numOpVars=numOpVars+1;
if (visitBranchCASFail2(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case Eq: {
Arg __tmp239=__tmp238.rhs(0);
if (__tmp239 instanceof Var) {
Var __tmp240=(Var)__tmp239;
Instruction __tmp241=findInstruction(__tmp240);
if (__tmp241!=null) {
opVars[numOpVars+1]=__tmp240;
switch (__tmp241.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp242=__tmp241.rhs(1);
if (argsEqual(__tmp242,__tmp238.rhs(1))) {
if (visitBranchCASFail3(o,
__tmp238,
__tmp241)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp241);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchNeq2Load1(o,
__tmp238,
__tmp241)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp241);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp243=__tmp238.rhs(1);
if (__tmp243 instanceof Var) {
Var __tmp244=(Var)__tmp243;
Instruction __tmp245=findInstruction(__tmp244);
if (__tmp245!=null) {
opVars[numOpVars+1]=__tmp244;
switch (__tmp245.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp246=__tmp238.rhs(0);
if (argsEqual(__tmp246,__tmp245.rhs(1))) {
if (visitBranchCASFail5(o,
__tmp238,
__tmp245)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp245);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchNeq2Load2(o,
__tmp238,
__tmp245)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp245);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchNeq2(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case Neq: {
Arg __tmp247=__tmp238.rhs(0);
if (__tmp247 instanceof Var) {
Var __tmp248=(Var)__tmp247;
Instruction __tmp249=findInstruction(__tmp248);
if (__tmp249!=null) {
opVars[numOpVars+1]=__tmp248;
switch (__tmp249.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp250=__tmp249.rhs(1);
if (argsEqual(__tmp250,__tmp238.rhs(1))) {
if (visitBranchCASSucc4(o,
__tmp238,
__tmp249)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp249);
return true;
}
}
break;
}
case And: {
Arg __tmp251=__tmp249.rhs(0);
if (__tmp251 instanceof Var) {
Var __tmp252=(Var)__tmp251;
Instruction __tmp253=findInstruction(__tmp252);
if (__tmp253!=null) {
opVars[numOpVars+2]=__tmp252;
switch (__tmp253.opcode()) {
case Load: {
this.numOpVars=numOpVars+3;
Arg __tmp254=__tmp249.rhs(1);
if (argsEqual(__tmp254,__tmp238.rhs(1))) {
if (__tmp249.rhs(1) instanceof Arg.IntConst) {
if (visitBranchEq2ContentsAndLoad(o,
__tmp238,
__tmp249,
__tmp253)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp249);
acceptedOperation(__tmp253);
return true;
}
}
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+2;
Arg __tmp255=__tmp249.rhs(1);
if (argsEqual(__tmp255,__tmp238.rhs(1))) {
if (__tmp249.rhs(1) instanceof Arg.IntConst) {
if (visitBranchEq2ContentsAnd(o,
__tmp238,
__tmp249)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp249);
return true;
}
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchEq2Load1(o,
__tmp238,
__tmp249)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp249);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp256=__tmp238.rhs(1);
if (__tmp256 instanceof Var) {
Var __tmp257=(Var)__tmp256;
Instruction __tmp258=findInstruction(__tmp257);
if (__tmp258!=null) {
opVars[numOpVars+1]=__tmp257;
switch (__tmp258.opcode()) {
case StrongLoadCAS: {
this.numOpVars=numOpVars+2;
Arg __tmp259=__tmp238.rhs(0);
if (argsEqual(__tmp259,__tmp258.rhs(1))) {
if (visitBranchCASSucc6(o,
__tmp238,
__tmp258)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp258);
return true;
}
}
break;
}
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchEq2Load2(o,
__tmp238,
__tmp258)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp258);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchEq2(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case And: {
Arg __tmp260=__tmp238.rhs(0);
if (__tmp260 instanceof Var) {
Var __tmp261=(Var)__tmp260;
Instruction __tmp262=findInstruction(__tmp261);
if (__tmp262!=null) {
opVars[numOpVars+1]=__tmp261;
switch (__tmp262.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchAndZeroLoad1(o,
__tmp238,
__tmp262)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp262);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp263=__tmp238.rhs(1);
if (__tmp263 instanceof Var) {
Var __tmp264=(Var)__tmp263;
Instruction __tmp265=findInstruction(__tmp264);
if (__tmp265!=null) {
opVars[numOpVars+1]=__tmp264;
switch (__tmp265.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchAndZeroLoad2(o,
__tmp238,
__tmp265)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp265);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchAndZero(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case LessThan: {
Arg __tmp266=__tmp238.rhs(0);
if (__tmp266 instanceof Var) {
Var __tmp267=(Var)__tmp266;
Instruction __tmp268=findInstruction(__tmp267);
if (__tmp268!=null) {
opVars[numOpVars+1]=__tmp267;
switch (__tmp268.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchGELoad1(o,
__tmp238,
__tmp268)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp268);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp269=__tmp238.rhs(1);
if (__tmp269 instanceof Var) {
Var __tmp270=(Var)__tmp269;
Instruction __tmp271=findInstruction(__tmp270);
if (__tmp271!=null) {
opVars[numOpVars+1]=__tmp270;
switch (__tmp271.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchGELoad2(o,
__tmp238,
__tmp271)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp271);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchGE(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case LessThanEq: {
Arg __tmp272=__tmp238.rhs(0);
if (__tmp272 instanceof Var) {
Var __tmp273=(Var)__tmp272;
Instruction __tmp274=findInstruction(__tmp273);
if (__tmp274!=null) {
opVars[numOpVars+1]=__tmp273;
switch (__tmp274.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchGTLoad1(o,
__tmp238,
__tmp274)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp274);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp275=__tmp238.rhs(1);
if (__tmp275 instanceof Var) {
Var __tmp276=(Var)__tmp275;
Instruction __tmp277=findInstruction(__tmp276);
if (__tmp277!=null) {
opVars[numOpVars+1]=__tmp276;
switch (__tmp277.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchGTLoad2(o,
__tmp238,
__tmp277)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp277);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchGT(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case ULessThan: {
Arg __tmp278=__tmp238.rhs(0);
if (__tmp278 instanceof Var) {
Var __tmp279=(Var)__tmp278;
Instruction __tmp280=findInstruction(__tmp279);
if (__tmp280!=null) {
opVars[numOpVars+1]=__tmp279;
switch (__tmp280.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchUGELoad1(o,
__tmp238,
__tmp280)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp280);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp281=__tmp238.rhs(1);
if (__tmp281 instanceof Var) {
Var __tmp282=(Var)__tmp281;
Instruction __tmp283=findInstruction(__tmp282);
if (__tmp283!=null) {
opVars[numOpVars+1]=__tmp282;
switch (__tmp283.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchUGELoad2(o,
__tmp238,
__tmp283)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp283);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchUGE(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case ULessThanEq: {
Arg __tmp284=__tmp238.rhs(0);
if (__tmp284 instanceof Var) {
Var __tmp285=(Var)__tmp284;
Instruction __tmp286=findInstruction(__tmp285);
if (__tmp286!=null) {
opVars[numOpVars+1]=__tmp285;
switch (__tmp286.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchUGTLoad1(o,
__tmp238,
__tmp286)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp286);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp287=__tmp238.rhs(1);
if (__tmp287 instanceof Var) {
Var __tmp288=(Var)__tmp287;
Instruction __tmp289=findInstruction(__tmp288);
if (__tmp289!=null) {
opVars[numOpVars+1]=__tmp288;
switch (__tmp289.opcode()) {
case Load: {
this.numOpVars=numOpVars+2;
if (visitBranchUGTLoad2(o,
__tmp238,
__tmp289)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
acceptedOperation(__tmp289);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+1;
if (visitBranchUGT(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
case Load: {
this.numOpVars=numOpVars+1;
if (visitBranchZLoad(o,
__tmp238)) {
acceptedOperation(o);
acceptedOperation(__tmp238);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitBranchZero(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleLessThan(Operation o,int numOpVars) {
Arg __tmp290=o.rhs(0);
if (__tmp290 instanceof Var) {
Var __tmp291=(Var)__tmp290;
Instruction __tmp292=findInstruction(__tmp291);
if (__tmp292!=null) {
opVars[numOpVars+0]=__tmp291;
switch (__tmp292.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLessThanLoad1(o,
__tmp292)) {
acceptedOperation(o);
acceptedOperation(__tmp292);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp293=o.rhs(1);
if (__tmp293 instanceof Var) {
Var __tmp294=(Var)__tmp293;
Instruction __tmp295=findInstruction(__tmp294);
if (__tmp295!=null) {
opVars[numOpVars+0]=__tmp294;
switch (__tmp295.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLessThanLoad2(o,
__tmp295)) {
acceptedOperation(o);
acceptedOperation(__tmp295);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitLessThan(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleULessThan(Operation o,int numOpVars) {
Arg __tmp296=o.rhs(0);
if (__tmp296 instanceof Var) {
Var __tmp297=(Var)__tmp296;
Instruction __tmp298=findInstruction(__tmp297);
if (__tmp298!=null) {
opVars[numOpVars+0]=__tmp297;
switch (__tmp298.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitULessThanLoad1(o,
__tmp298)) {
acceptedOperation(o);
acceptedOperation(__tmp298);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp299=o.rhs(1);
if (__tmp299 instanceof Var) {
Var __tmp300=(Var)__tmp299;
Instruction __tmp301=findInstruction(__tmp300);
if (__tmp301!=null) {
opVars[numOpVars+0]=__tmp300;
switch (__tmp301.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitULessThanLoad2(o,
__tmp301)) {
acceptedOperation(o);
acceptedOperation(__tmp301);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitULessThan(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleLessThanEq(Operation o,int numOpVars) {
Arg __tmp302=o.rhs(0);
if (__tmp302 instanceof Var) {
Var __tmp303=(Var)__tmp302;
Instruction __tmp304=findInstruction(__tmp303);
if (__tmp304!=null) {
opVars[numOpVars+0]=__tmp303;
switch (__tmp304.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLessThanEqLoad1(o,
__tmp304)) {
acceptedOperation(o);
acceptedOperation(__tmp304);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp305=o.rhs(1);
if (__tmp305 instanceof Var) {
Var __tmp306=(Var)__tmp305;
Instruction __tmp307=findInstruction(__tmp306);
if (__tmp307!=null) {
opVars[numOpVars+0]=__tmp306;
switch (__tmp307.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitLessThanEqLoad2(o,
__tmp307)) {
acceptedOperation(o);
acceptedOperation(__tmp307);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitLessThanEq(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleULessThanEq(Operation o,int numOpVars) {
Arg __tmp308=o.rhs(0);
if (__tmp308 instanceof Var) {
Var __tmp309=(Var)__tmp308;
Instruction __tmp310=findInstruction(__tmp309);
if (__tmp310!=null) {
opVars[numOpVars+0]=__tmp309;
switch (__tmp310.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitULessThanEqLoad1(o,
__tmp310)) {
acceptedOperation(o);
acceptedOperation(__tmp310);
return true;
}
break;
}
default: break;
}
}
}
Arg __tmp311=o.rhs(1);
if (__tmp311 instanceof Var) {
Var __tmp312=(Var)__tmp311;
Instruction __tmp313=findInstruction(__tmp312);
if (__tmp313!=null) {
opVars[numOpVars+0]=__tmp312;
switch (__tmp313.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitULessThanEqLoad2(o,
__tmp313)) {
acceptedOperation(o);
acceptedOperation(__tmp313);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitULessThanEq(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleMemcpy(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitMemcpy(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleCall(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitCall(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleCallIndirect(Operation o,int numOpVars) {
Arg __tmp314=o.rhs(0);
if (__tmp314 instanceof Var) {
Var __tmp315=(Var)__tmp314;
Instruction __tmp316=findInstruction(__tmp315);
if (__tmp316!=null) {
opVars[numOpVars+0]=__tmp315;
switch (__tmp316.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitCallIndirectLoad(o,
__tmp316)) {
acceptedOperation(o);
acceptedOperation(__tmp316);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitCallIndirect(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleRawReturn(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitRawReturn(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleNotReached(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitNotReached(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleJump(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitJump(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleAwesomeJump(Operation o,int numOpVars) {
Arg __tmp317=o.rhs(0);
if (__tmp317 instanceof Var) {
Var __tmp318=(Var)__tmp317;
Instruction __tmp319=findInstruction(__tmp318);
if (__tmp319!=null) {
opVars[numOpVars+0]=__tmp318;
switch (__tmp319.opcode()) {
case Load: {
this.numOpVars=numOpVars+1;
if (visitAwesomeJumpLoad(o,
__tmp319)) {
acceptedOperation(o);
acceptedOperation(__tmp319);
return true;
}
break;
}
default: break;
}
}
}
this.numOpVars=numOpVars+0;
if (visitAwesomeJump(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleMov(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitMov(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handlePhi(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitPhi(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleIpsilon(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitIpsilon(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleFence(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitFence(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleHardCompilerFence(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitHardCompilerFence(o)) {
acceptedOperation(o);
return true;
}
return false;
}
private boolean __handleHardUse(Operation o,int numOpVars) {
this.numOpVars=numOpVars+0;
if (visitHardUse(o)) {
acceptedOperation(o);
return true;
}
return false;
}
public boolean acceptImpl(Operation o,int numOpVars) {
switch (o.opcode()) {
case Store:
if (__handleStore(o,numOpVars)) return true;
else break;
case Add:
if (__handleAdd(o,numOpVars)) return true;
else break;
case Mul:
if (__handleMul(o,numOpVars)) return true;
else break;
case GetCVarAddress:
if (__handleGetCVarAddress(o,numOpVars)) return true;
else break;
case GetCArgAddress:
if (__handleGetCArgAddress(o,numOpVars)) return true;
else break;
case Sub:
if (__handleSub(o,numOpVars)) return true;
else break;
case Div:
if (__handleDiv(o,numOpVars)) return true;
else break;
case Mod:
if (__handleMod(o,numOpVars)) return true;
else break;
case Or:
if (__handleOr(o,numOpVars)) return true;
else break;
case Xor:
if (__handleXor(o,numOpVars)) return true;
else break;
case And:
if (__handleAnd(o,numOpVars)) return true;
else break;
case Not:
if (__handleNot(o,numOpVars)) return true;
else break;
case Boolify:
if (__handleBoolify(o,numOpVars)) return true;
else break;
case Sqrt:
if (__handleSqrt(o,numOpVars)) return true;
else break;
case Load:
if (__handleLoad(o,numOpVars)) return true;
else break;
case StrongLoadCAS:
if (__handleStrongLoadCAS(o,numOpVars)) return true;
else break;
case StrongCAS:
if (__handleStrongCAS(o,numOpVars)) return true;
else break;
case StrongVoidCAS:
if (__handleStrongVoidCAS(o,numOpVars)) return true;
else break;
case WeakCAS:
if (__handleWeakCAS(o,numOpVars)) return true;
else break;
case Eq:
if (__handleEq(o,numOpVars)) return true;
else break;
case Neq:
if (__handleNeq(o,numOpVars)) return true;
else break;
case Neg:
if (__handleNeg(o,numOpVars)) return true;
else break;
case BitNot:
if (__handleBitNot(o,numOpVars)) return true;
else break;
case Shl:
if (__handleShl(o,numOpVars)) return true;
else break;
case Shr:
if (__handleShr(o,numOpVars)) return true;
else break;
case Ushr:
if (__handleUshr(o,numOpVars)) return true;
else break;
case FXor:
if (__handleFXor(o,numOpVars)) return true;
else break;
case Float0:
if (__handleFloat0(o,numOpVars)) return true;
else break;
case Double0:
if (__handleDouble0(o,numOpVars)) return true;
else break;
case GetCArg:
if (__handleGetCArg(o,numOpVars)) return true;
else break;
case Cast:
if (__handleCast(o,numOpVars)) return true;
else break;
case Fiat:
if (__handleFiat(o,numOpVars)) return true;
else break;
case IntToPointerZeroFill:
if (__handleIntToPointerZeroFill(o,numOpVars)) return true;
else break;
case FirstHalf:
if (__handleFirstHalf(o,numOpVars)) return true;
else break;
case SecondHalf:
if (__handleSecondHalf(o,numOpVars)) return true;
else break;
case BranchNonZero:
if (__handleBranchNonZero(o,numOpVars)) return true;
else break;
case BranchZero:
if (__handleBranchZero(o,numOpVars)) return true;
else break;
case LessThan:
if (__handleLessThan(o,numOpVars)) return true;
else break;
case ULessThan:
if (__handleULessThan(o,numOpVars)) return true;
else break;
case LessThanEq:
if (__handleLessThanEq(o,numOpVars)) return true;
else break;
case ULessThanEq:
if (__handleULessThanEq(o,numOpVars)) return true;
else break;
case Memcpy:
if (__handleMemcpy(o,numOpVars)) return true;
else break;
case Call:
if (__handleCall(o,numOpVars)) return true;
else break;
case CallIndirect:
if (__handleCallIndirect(o,numOpVars)) return true;
else break;
case RawReturn:
if (__handleRawReturn(o,numOpVars)) return true;
else break;
case NotReached:
if (__handleNotReached(o,numOpVars)) return true;
else break;
case Jump:
if (__handleJump(o,numOpVars)) return true;
else break;
case AwesomeJump:
if (__handleAwesomeJump(o,numOpVars)) return true;
else break;
case Mov:
if (__handleMov(o,numOpVars)) return true;
else break;
case Phi:
if (__handlePhi(o,numOpVars)) return true;
else break;
case Ipsilon:
if (__handleIpsilon(o,numOpVars)) return true;
else break;
case Fence:
if (__handleFence(o,numOpVars)) return true;
else break;
case HardCompilerFence:
if (__handleHardCompilerFence(o,numOpVars)) return true;
else break;
case HardUse:
if (__handleHardUse(o,numOpVars)) return true;
else break;
default: break;
}
this.numOpVars=numOpVars;
if (visitDefault(o)) {
acceptedOperation(o);
return true;
}
return false;
}
public MainLoweringBU() {
super(3);
}
}
