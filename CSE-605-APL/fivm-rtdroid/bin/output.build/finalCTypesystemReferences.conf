# generated by fivmc/c1 v0.9.1-r05153139d720 (c) 2009, 2010, 2011, 2012, 2013, 2014 Fiji Systems Inc., All Rights Reserved
{
    cfields = (
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = typeEpoch;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = codePtr;
            offsetof = -1;
            struct = fivmr_MethodRec;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 132, 75]";
            name = lineNumber;
            offsetof = -1;
            struct = fivmr_StackTraceFrame;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = classTable;
            offsetof = -1;
            struct = fivmr_Payload;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = curExceptionHandle;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Array[Array[byte]] gethostbynameImpl(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 27, 1031]";
            name = h_addrtype;
            offsetof = -1;
            struct = "struct hostent";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocSpine(pointer, int, pointer, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 161, 635]";
            name = ssBump;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = id;
            offsetof = -1;
            struct = fivmr_Frame;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = methods;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = name;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = typeList;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[boolean heapArea(int)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 24, 98]";
            name = heapMemoryArea;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/Monitors Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer monitorData()] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 7, 105]";
            name = forMonitor;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Array[Array[byte]] gethostbynameImpl(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 38, 1032]";
            name = h_length;
            offsetof = -1;
            struct = "struct hostent";
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = flags;
            offsetof = -1;
            struct = fivmr_MethodRec;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getInvCurShaded()] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 14, 1629]";
            name = zeroCurShaded;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PACKAGE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void stampGCBits(int, pointer, pointer)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 86, 314]";
            name = curShadedAlloc;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[gnu/java/nio/FCNativeChannel Root[1014] (effectively final)] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/net/InetSocketAddress Root[1014]] makeISA(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 38, 204]";
            name = sin6_addr;
            offsetof = -1;
            struct = "struct sockaddr_in6";
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = word;
            offsetof = -1;
            struct = fivmr_ScopeID;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void nanotimeToTimeval(pointer, long)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 21, 623]";
            name = tv_sec;
            offsetof = -1;
            struct = "struct timeval";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[boolean heapArea(int)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 14, 97]";
            name = currentArea;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[java/lang/fivmSupport Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getClassLoaderData(Class[java/lang/ClassLoader Root[1014] (abstract)])] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 118, 168]";
            name = thunkingLock;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = BOOLEAN;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void throwOutOfMemoryError_inJava()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 9, 1027]";
            name = abortOOME;
            offsetof = -1;
            struct = fivmr_GC;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = superInterfaces;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = BYTE;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/FijiCoreCommon Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer makeSaAddr(Array[byte], int)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 26, 53]";
            name = sin_family;
            offsetof = -1;
            struct = "struct sockaddr_in";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] addDestructor(int, Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 126, 1606]";
            name = object;
            offsetof = -1;
            struct = fivmr_Destructor;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocSpine(pointer, int, pointer, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 82, 619]";
            name = ssSize;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = primFields;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getTopTD()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 9, 2521]";
            name = td_top;
            offsetof = -1;
            struct = fivmr_Payload;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = state;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] addDestructor(int, Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 170, 1610]";
            name = destructorTail;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/ClassLoader Root[1014] (abstract)] getClassLoaderForContext(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 5, 102]";
            name = classLoader;
            offsetof = -1;
            struct = fivmr_TypeContext;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/String Root[1014] (effectively final)] gethostbyaddr(Array[byte], int)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS STACK_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 76, 1100]";
            name = h_name;
            offsetof = -1;
            struct = "struct hostent";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 53, 65]";
            name = execFlags;
            offsetof = -1;
            struct = fivmr_ThreadStackTrace;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] allocSlow(int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 134, 818]";
            name = size;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = flags;
            offsetof = -1;
            struct = fivmr_TypeStub;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stackLimit;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = obj;
            offsetof = -1;
            struct = fivmr_Handle;
        },
        {
            basetype = CHAR;
            from = "class com.fiji.fivm.c1.CStructField";
            name = nSuperInterfaces;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = size;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MemoryAreas Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void setJavaArea(pointer, Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 9, 87]";
            name = javaArea;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = state;
            offsetof = -1;
            struct = fivmr_Monitor;
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = flags;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MemoryAreas Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void MemoryArea_doRun(pointer, Interface[java/lang/Runnable Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 23, 259]";
            name = parent;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 156, 72]";
            name = next;
            offsetof = -1;
            struct = fivmr_StackTraceFrame;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = vm;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stateBufOverflow;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = curException;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/Monitors Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void lock(Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 160, 145]";
            name = holding;
            offsetof = -1;
            struct = fivmr_MonitorData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stateBufGCMap;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = bump;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] addDestructor(int, Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 147, 1607]";
            name = next;
            offsetof = -1;
            struct = fivmr_Destructor;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = vtable;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = BOOLEAN;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void throwStackOverflowRTE()] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC DONT_CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 9, 723]";
            name = handlingStackOverflow;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = BYTE;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/FijiCoreCommon Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer makeSaAddr6(Array[byte], int)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 44, 68]";
            name = sin6_family;
            offsetof = -1;
            struct = "struct sockaddr_in6";
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = state;
            offsetof = -1;
            struct = fivmr_TypeStub;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = itable;
            offsetof = -1;
            struct = fivmr_TypeEpoch;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = name;
            offsetof = -1;
            struct = fivmr_TypeStub;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer baseTypeContext(int)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 7, 92]";
            name = baseContexts;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[gnu/java/nio/FCNativeChannel Root[1014] (effectively final)] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/net/InetSocketAddress Root[1014]] makeISA(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 76, 208]";
            name = sin_addr;
            offsetof = -1;
            struct = "struct sockaddr_in";
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = parent;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = fields;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PACKAGE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] alloc(int, pointer, pointer, pointer, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 290, 1332]";
            name = uniqueID;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/Magic Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getSettings()] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 7, 303]";
            name = settings;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = curF;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 180, 62]";
            name = next;
            offsetof = -1;
            struct = fivmr_ThreadStackTrace;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stubList;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/Monitors Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void lock(Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 163, 144]";
            name = next;
            offsetof = -1;
            struct = fivmr_Monitor;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Array[Array[byte]] gethostbynameImpl(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 50, 1033]";
            name = h_addr_list;
            offsetof = -1;
            struct = "struct hostent";
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = up;
            offsetof = -1;
            struct = fivmr_Frame;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = payload;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MemoryAreas Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer top()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 30, 220]";
            name = area;
            offsetof = -1;
            struct = fivmr_MemoryAreaStack;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = buckets;
            offsetof = -1;
            struct = fivmr_TypeEpoch;
        },
        {
            basetype = BOOLEAN;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void storeBarrier(Class[java/lang/Object Root[1014]], pointer, Class[java/lang/Object Root[1014]], int)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 53, 1806]";
            name = tracing;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = SHORT;
            from = "DebugInfo[CodeOrigin[Method[Class[gnu/java/nio/FCNativeChannel Root[1014] (effectively final)] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/net/InetSocketAddress Root[1014]] makeISA(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 88, 209]";
            name = sin_port;
            offsetof = -1;
            struct = "struct sockaddr_in";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] addDestructor(int, Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 144, 1608]";
            name = destructorHead;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = forward;
            offsetof = -1;
            struct = fivmr_TypeStub;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PACKAGE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void stampGCBits(int, pointer, pointer)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 46, 306]";
            name = scopeID;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = BYTE;
            from = "DebugInfo[CodeOrigin[Method[Class[gnu/java/nio/FCNativeChannel Root[1014] (effectively final)] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/net/InetSocketAddress Root[1014]] makeISA(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 5, 200]";
            name = sa_family;
            offsetof = -1;
            struct = "struct sockaddr";
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/ThreadPriority Root[1014] (effectively final)] STATIC PACKAGE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void <clinit>()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 7, 92]";
            name = maxPriority;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocChunk(pointer, pointer, int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 58, 686]";
            name = start;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/Monitors Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void lock(Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 54, 126]";
            name = lockingId;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[int statGetMode(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS STACK_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 32, 825]";
            name = st_mode;
            offsetof = -1;
            struct = "struct stat";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[boolean sharedArea(int)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 27, 113]";
            name = shared;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 20, 60]";
            name = first;
            offsetof = -1;
            struct = fivmr_AllThreadStackTraces;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = gc;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = forward;
            offsetof = -1;
            struct = fivmr_Monitor;
        },
        {
            basetype = CHAR;
            from = "class com.fiji.fivm.c1.CStructField";
            name = numMethods;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = inited;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = refs;
            offsetof = -1;
            struct = fivmr_Frame;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 41, 64]";
            name = execStatus;
            offsetof = -1;
            struct = fivmr_ThreadStackTrace;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = curNF;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = alloc;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = arrayElement;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = BYTE;
            from = "class com.fiji.fivm.c1.CStructField";
            name = tid;
            offsetof = -1;
            struct = fivmr_TypeEpoch;
        },
        {
            basetype = BOOLEAN;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] allocSlow(int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 303, 854]";
            name = noMoreHeapAlloc;
            offsetof = -1;
            struct = fivmr_GC;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocDestructorSlow(Class[java/lang/Object Root[1014]])] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 11, 1569]";
            name = roots;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = BOOLEAN;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/FinalizerProcessor Root[1014] (effectively final)] INSTANCE PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[int processNextBatchAndLog(boolean)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 76, 125]";
            name = logGC;
            offsetof = -1;
            struct = fivmr_GC;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 93, 70]";
            name = top;
            offsetof = -1;
            struct = fivmr_ThreadStackTrace;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = forward;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/fivmRuntime Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void fivmRuntime_notifyInitialized()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 43, 148]";
            name = flags;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MemoryAreas Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer top()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 23, 221]";
            name = scopeStack;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = SHORT;
            from = "DebugInfo[CodeOrigin[Method[Class[gnu/java/nio/FCNativeChannel Root[1014] (effectively final)] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/net/InetSocketAddress Root[1014]] makeISA(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 50, 205]";
            name = sin6_port;
            offsetof = -1;
            struct = "struct sockaddr_in6";
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = pollingUnion;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = BYTE;
            from = "class com.fiji.fivm.c1.CStructField";
            name = requiredAlignment;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] allocSlow(int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 122, 816]";
            name = start;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = patchRepo;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[java/lang/fivmSupport Root[1014] (effectively final)] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Array[byte] getBytecode(pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 5, 234]";
            name = bytecode;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stateBuf;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = classObject;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = entrypoint;
            offsetof = -1;
            struct = fivmr_MethodRec;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = gcMap;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = INT;
            from = "class com.fiji.fivm.c1.CStructField";
            name = canonicalNumber;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 118, 74]";
            name = mr;
            offsetof = -1;
            struct = fivmr_StackTraceFrame;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[java/lang/FCString Root[1014] (effectively final)] STATIC PACKAGE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void <clinit>()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 16, 54]";
            name = stringIndex;
            offsetof = -1;
            struct = fivmr_Payload;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getGCforVM(pointer)] CANNOT_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 5, 274]";
            name = gc;
            offsetof = -1;
            struct = fivmr_VM;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer getInvCurShaded()] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 26, 1631]";
            name = invCurShaded;
            offsetof = -1;
            struct = fivmr_GCData;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocChunk(pointer, pointer, int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 92, 690]";
            name = size;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocSpine(pointer, int, pointer, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 68, 618]";
            name = zero;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/DebugAndProfile Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Interface[java/util/List Root[1014]] getAllThreadStackTraces()] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 65, 68]";
            name = thread;
            offsetof = -1;
            struct = fivmr_ThreadStackTrace;
        },
        {
            basetype = CHAR;
            from = "class com.fiji.fivm.c1.CStructField";
            name = numFields;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = refFields;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = INT;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/libc Root[1014]] STATIC PUBLIC VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[void nanotimeToTimeval(pointer, long)] MAY_SAFEPOINT CLOBBERS_WORLD IMPLICIT_POLLCHECKS IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] IMPLICIT_POLLCHECKS DISALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 41, 624]";
            name = tv_usec;
            offsetof = -1;
            struct = "struct timeval";
        },
        {
            basetype = POINTER;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[pointer allocSpine(pointer, int, pointer, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS DEFAULT_ALLOC CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 46, 614]";
            name = ssEnd;
            offsetof = -1;
            struct = fivmr_GCSpaceAlloc;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] allocSlow(int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 53, 804]";
            name = bump;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = curIniter;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stringTable;
            offsetof = -1;
            struct = fivmr_Payload;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = stackHigh;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = CHAR;
            from = "class com.fiji.fivm.c1.CStructField";
            name = bucket;
            offsetof = -1;
            struct = fivmr_TypeEpoch;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = jni;
            offsetof = -1;
            struct = fivmr_NativeFrame;
        },
        {
            basetype = BYTE;
            from = "class com.fiji.fivm.c1.CStructField";
            name = refSize;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = allocFrame;
            offsetof = -1;
            struct = fivmr_ThreadState;
        },
        {
            basetype = POINTER;
            from = "class com.fiji.fivm.c1.CStructField";
            name = location;
            offsetof = -1;
            struct = fivmr_MethodRec;
        },
        {
            basetype = VOID;
            from = "class com.fiji.fivm.c1.CStructField";
            name = epochs;
            offsetof = -1;
            struct = fivmr_TypeData;
        },
        {
            basetype = VOID;
            from = "DebugInfo[CodeOrigin[Method[Class[com/fiji/fivm/r1/MM Root[1014]] STATIC PRIVATE VIRTUAL UNSYNCHRONIZED BYTECODE MethodSig[Class[java/lang/Object Root[1014]] allocSlow(int, pointer)] MAY_SAFEPOINT CLOBBERS_WORLD EXPLICIT_POLLCHECKS_ONLY IMPLICIT_SAFETY_CHECKS ALLOC_AS_CALLER CHECK_STACK_OVERFLOW] EXPLICIT_POLLCHECKS_ONLY ALLOW_UNSAFE IMPLICIT_SAFETY_CHECKS], 204, 830]";
            name = objList;
            offsetof = -1;
            struct = fivmr_MemoryArea;
        }
    );
    ctypes = (
        {
            name = fivmr_TypeStub;
            sizeof = -1;
        },
        {
            name = "struct sockaddr_in6";
            sizeof = -1;
        },
        {
            name = "const void *";
            sizeof = 4;
        },
        {
            name = fivmr_TypeData;
            sizeof = -1;
        },
        {
            name = "struct hostent";
            sizeof = -1;
        },
        {
            name = fivmr_TypeContext;
            sizeof = -1;
        },
        {
            name = "struct sockaddr";
            sizeof = -1;
        },
        {
            name = float;
            sizeof = 4;
        },
        {
            name = fivmr_GCData;
            sizeof = -1;
        },
        {
            name = fivmr_TypeEpoch;
            sizeof = -1;
        },
        {
            name = fivmr_GCSpaceAlloc;
            sizeof = -1;
        },
        {
            name = fivmr_MonitorData;
            sizeof = -1;
        },
        {
            name = uint64_t;
            sizeof = 8;
        },
        {
            name = "struct statfs";
            sizeof = -1;
        },
        {
            name = fivmr_MethodRec;
            sizeof = -1;
        },
        {
            name = uint32_t;
            sizeof = 4;
        },
        {
            name = int64_t;
            sizeof = 8;
        },
        {
            name = "struct sockaddr_in";
            sizeof = -1;
        },
        {
            name = int8_t;
            sizeof = 1;
        },
        {
            name = "struct stat";
            sizeof = -1;
        },
        {
            name = fivmr_Payload;
            sizeof = -1;
        },
        {
            name = fivmr_MemoryAreaStack;
            sizeof = -1;
        },
        {
            name = fivmr_ThreadStackTrace;
            sizeof = -1;
        },
        {
            name = fivmr_GC;
            sizeof = -1;
        },
        {
            name = intptr_t;
            sizeof = 4;
        },
        {
            name = fivmr_MemoryArea;
            sizeof = -1;
        },
        {
            name = fivmr_ThreadState;
            sizeof = -1;
        },
        {
            name = fivmr_Frame;
            sizeof = -1;
        },
        {
            name = void;
            sizeof = 0;
        },
        {
            name = fivmr_VM;
            sizeof = -1;
        },
        {
            name = uintptr_t;
            sizeof = 4;
        },
        {
            name = double;
            sizeof = 8;
        },
        {
            name = uint8_t;
            sizeof = 1;
        },
        {
            name = fivmr_Destructor;
            sizeof = -1;
        },
        {
            name = fivmr_NativeFrame;
            sizeof = -1;
        },
        {
            name = uint16_t;
            sizeof = 2;
        },
        {
            name = int32_t;
            sizeof = 4;
        },
        {
            name = fivmr_Handle;
            sizeof = -1;
        },
        {
            name = "struct in_addr";
            sizeof = -1;
        },
        {
            name = fivmr_AllThreadStackTraces;
            sizeof = -1;
        },
        {
            name = "void *";
            sizeof = 4;
        },
        {
            name = int16_t;
            sizeof = 2;
        },
        {
            name = fivmr_Monitor;
            sizeof = -1;
        },
        {
            name = "struct timeval";
            sizeof = -1;
        },
        {
            name = fivmr_ScopeID;
            sizeof = -1;
        },
        {
            name = fivmr_StackTraceFrame;
            sizeof = -1;
        }
    );
    godGivenCVars = (
        {
            basetype = INT;
            name = F_SETFL;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = EAFNOSUPPORT;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = F_GETFL;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = EAGAIN;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_RR_MIN;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = EINTR;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_NORMAL_MAX;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIONREAD;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_CREAT;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_NORMAL_MIN;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = POINTER;
            name = FIVMR_SYSTEM_GC_STR;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_FIFO_MIN;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = EINPROGRESS;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = SOCK_STREAM;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = POINTER;
            name = FIVMR_GC_MARKBITS_MASK;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_RDWR;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_VMF_RUN_PROFILER;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = AF_UNSPEC;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_MIN;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = SOCK_DGRAM;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = fivmr_fakeRTPriorities;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_TRUNC;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_VMF_VERBOSE_EXCEPTIONS;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = AF_INET;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = SEEK_CUR;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = ECONNREFUSED;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = LONG;
            name = O_NONBLOCK;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_RR_MAX;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_RDONLY;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_FIFO_MAX;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = SEEK_END;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_PR_SUPPORTED;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = errno;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = INADDR_ANY;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_WRONLY;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_APPEND;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = O_EXCL;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = SEEK_SET;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = AF_INET6;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        },
        {
            basetype = INT;
            name = FIVMR_TPR_CRITICAL;
            usedForGetAddress = no;
            usedForRead = no;
            usedForWrite = no;
        }
    );
    godGivenFunctions = (
        {
            name = fivmr_TypeData_elementSize;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_alloc;
            signature = {
                params = ( POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_bytePutStatic2;
            signature = {
                params = ( POINTER, POINTER, BYTE, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_readByte;
            signature = {
                params = ( INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_mallocAssert;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_iterateDebugFrames_forJava;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_pushAndInitNF;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_use;
            signature = {
                params = ( POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intWeakCASField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, INT, INT, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_float_to_long;
            signature = {
                params = ( FLOAT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_goToJava;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_addHandle;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_isBigEndian;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Object_recCount;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_lockedPrint;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_totalMemory;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_setCurrentArea;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectWeakCASField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = CHAR;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AllThreadStackTraces_get;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_create;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_goToNative;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_NativeFrame_addHandle;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_reresolveSpecial;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_removeHandle;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_location;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = FLOAT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = inet_aton;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_offsetFromObj;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectPutStatic;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, FLOAT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_call;
            signature = {
                params = ( POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = opendir;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_unlock;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_allocDestructorSlow;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_owner;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_curTime;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_bind;
            signature = {
                params = ( INT, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_checkHeight;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_result;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = closedir;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = gethostname;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = getifaddrs;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findInstMethodNoIface2;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT, POINTER
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_useReflectByName;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeStub_getTypeData;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_allocRawSlow;
            signature = {
                params = (
                    POINTER, INT, POINTER, POINTER, POINTER, INT, POINTER
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = getpeername;
            signature = {
                params = ( INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadPriority_min;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = write;
            signature = {
                params = ( INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_curHolder;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_numFields;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = shutdown;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_print;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_findKnown;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_long_div;
            signature = {
                params = ( LONG, LONG );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortPutStatic2;
            signature = {
                params = ( POINTER, POINTER, SHORT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeStub_tryGetTypeData;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_allocSSSlow;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = statfs;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectArrayWeakCAS;
            signature = {
                params = (
                    POINTER, POINTER, INT, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_sizeOfTypeData;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ObjHeader_forObject;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = FLOAT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_nanosResolution;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_findMC;
            signature = {
                params = ( POINTER, INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ioctl_void;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doubleGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = DOUBLE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = readdir_r;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_access;
            signature = {
                params = ( POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_numMethods;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_JNI_libPrefix;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_getNextDestructor;
            signature = {
                params = ( POINTER, POINTER, BOOLEAN );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_flags;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_float_mod;
            signature = {
                params = ( FLOAT, FLOAT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = FLOAT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logExit;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = freg_region_alloc;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, CHAR, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_isInitializer;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = close;
            signature = {
                params = ( INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_SPC_incUnlock;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findInstMethod;
            signature = {
                params = ( POINTER, POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_enter;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_reallocAssert;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_flags;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatPutStatic2;
            signature = {
                params = ( POINTER, POINTER, FLOAT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_collectFromJava;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_requiredAlignment;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = CHAR;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_size;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = FLOAT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_addressOfField;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = recvfrom;
            signature = {
                params = (
                    INT, POINTER, POINTER, INT, POINTER, POINTER
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intPutField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = getsockopt;
            signature = {
                params = ( INT, INT, INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doublePutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, DOUBLE, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doubleGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = DOUBLE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_javaThreadObject;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findStaticField;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_getStackArea;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_param;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectGetStatic;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_bytePutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, BYTE, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_describeState;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_consumed;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_SPC_incBarrierFastPath;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intWeakCASStatic2;
            signature = {
                params = ( POINTER, POINTER, INT, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerArrayWeakCAS;
            signature = {
                params = (
                    POINTER, POINTER, INT, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_OS_arch;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, SHORT, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_DebugRec_withRootSize;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_VM_exit;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_pop;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Object_curHolder;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = connect;
            signature = {
                params = ( INT, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_accessReflect;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = sendto;
            signature = {
                params = (
                    INT, POINTER, POINTER, INT, POINTER, INT
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_maxMemory;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AllThreadStackTraces_free;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectWeakCASStatic;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_double_mod;
            signature = {
                params = ( DOUBLE, DOUBLE );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = DOUBLE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = CHAR;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_owner;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_staticFieldAddress;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_curTimePrecise;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_get;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_isConstructor;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_malloc;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, CHAR, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_lockWithHandshake;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeStub_refSize;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = ftruncate;
            signature = {
                params = ( INT, LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerWeakCASStatic2;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_isInterface;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_sleepAbsolute;
            signature = {
                params = ( POINTER, LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_throw;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findMethod;
            signature = {
                params = ( POINTER, POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_OS_name;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = lseek;
            signature = {
                params = ( INT, LONG, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_push;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, LONG, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ioctl_int;
            signature = {
                params = ( INT, INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_byteGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BYTE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = getcwd;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_SPC_incAllocSlowPath;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = SHORT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_descriptor;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadPriority_eqRT;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_JNI_libSuffix;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_writeByte;
            signature = {
                params = ( INT, BYTE );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_getLevel;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logResultInt;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_getNumStrings;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = accept;
            signature = {
                params = ( INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_sizeOfTypeDataForVTableLength;
            signature = {
                params = ( INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = unlink;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_printHex;
            signature = {
                params = ( LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_location;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = open;
            signature = {
                params = ( POINTER, INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_refSize;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_method;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = gethostbyaddr;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_addressOfElement;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_popNF;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Lock_unlock;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_forObject;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_callJ;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadPriority_ltRT;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doubleArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = DOUBLE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Handle_get;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logResultFloat;
            signature = {
                params = ( POINTER, POINTER, FLOAT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_lock;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = CHAR;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logEntry;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_dumpStackFor;
            signature = {
                params = ( POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_DebugRec_getBytecodePC;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_name;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_registerMC;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_double_to_long;
            signature = {
                params = ( DOUBLE );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_isArray;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_fcntl;
            signature = {
                params = ( INT, INT, LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_markSlow;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_notifyAll;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_methodForStackDepth;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = freeifaddrs;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_parent;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_availableProcessors;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_addDestructor;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectGetStatic2;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_barrierArg;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = chmod;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerWeakCASField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longPutStatic2;
            signature = {
                params = ( POINTER, POINTER, LONG, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doubleArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, DOUBLE, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GateHelpers_installArrayFieldReference;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_byteGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BYTE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_timedWait;
            signature = {
                params = ( POINTER, POINTER, LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_free;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_getIgnoreSystemGC;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_entrypoint;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_printNum;
            signature = {
                params = ( LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_inflate;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_describe;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_findStub;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_double_to_int;
            signature = {
                params = ( DOUBLE );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_setInterrupted;
            signature = {
                params = ( POINTER, BOOLEAN );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_byteArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, BYTE, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadPriority_max;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = listen;
            signature = {
                params = ( INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intArrayWeakCAS;
            signature = {
                params = (
                    POINTER, POINTER, INT, INT, INT, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = SHORT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_wait;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_isSubtypeOfFast;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerPutStatic2;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GateHelpers_installObjectElementReference;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = mkdir;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = access;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, SHORT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_isStaticInit;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = stat;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = realpath;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_callReflect;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fsync;
            signature = {
                params = ( INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_realloc;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_allocReflect;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_float_to_int;
            signature = {
                params = ( FLOAT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_pollcheck;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_free;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_free;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_getHeapArea;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_alloc;
            signature = {
                params = ( POINTER, LONG, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = getsockname;
            signature = {
                params = ( INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_longPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, LONG, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectPutStatic2;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = send;
            signature = {
                params = ( INT, POINTER, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logResultDouble;
            signature = {
                params = ( POINTER, POINTER, DOUBLE );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = rename;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = gethostbyname;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectWeakCASStatic2;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_SPC_incLock;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_getContext;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_dynamicCall;
            signature = {
                params = ( POINTER, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_arrayLength;
            signature = {
                params = ( POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_addTracedField;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_DebugRec_getMethod;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MemoryArea_getImmortalArea;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_abort;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_DebugRec_lookup;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_tryReturnBuffer;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_makeArray;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_tryGetBuffer;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_nparams;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_name;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_AH_long_mod;
            signature = {
                params = ( LONG, LONG );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = LONG;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_objectPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, POINTER, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = socket;
            signature = {
                params = ( INT, INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_charPutStatic2;
            signature = {
                params = ( POINTER, POINTER, CHAR, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Monitor_notify;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_field;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_lock;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_addUntracedField;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_matchesSig;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_doublePutStatic2;
            signature = {
                params = ( POINTER, POINTER, DOUBLE, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_byteArrayLoad;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = BYTE;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_describe;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_JNI_lookup;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logResultPtr;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = recv;
            signature = {
                params = ( INT, POINTER, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_tryClaimBuffer;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_isSubtypeOf;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_dynamicCallReflect;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_arrayElement;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ReflectLog_useReflect;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_locationToOffsetFromObj;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_checkInit;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intPutStatic2;
            signature = {
                params = ( POINTER, POINTER, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_logResultLong;
            signature = {
                params = ( POINTER, POINTER, LONG );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_getInterrupted;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_resolve;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_Log_unlock;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_shortGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = SHORT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_asClass;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_intArrayStore;
            signature = {
                params = ( POINTER, POINTER, INT, INT, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_isPrimitive;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_floatPutField;
            signature = {
                params = (
                    POINTER, POINTER, POINTER, FLOAT, INT
                );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_pointerGetField;
            signature = {
                params = ( POINTER, POINTER, POINTER, INT );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_id;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_getSuperInterface;
            signature = {
                params = ( POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_describeStateImpl;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_filename;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_JNI_loadLibrary;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = setsockopt;
            signature = {
                params = ( INT, INT, INT, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findStaticMethod;
            signature = {
                params = ( POINTER, POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = strcmp;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeContext_find;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_name;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = read;
            signature = {
                params = ( INT, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findInstField;
            signature = {
                params = ( POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GC_freeMemory;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = LONG;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ScopeBacking_alloc;
            signature = {
                params = ( POINTER, LONG );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = getenv;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeStub_union;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_SPC_incAlloc;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_flags;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ThreadState_pollcheckSlow;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = EXPLICIT_POLLCHECKS_ONLY;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GateHelpers_installArrayElementReference;
            signature = {
                params = ( POINTER, POINTER, INT, POINTER, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_unregisterMC;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_homeDir;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_GateHelpers_installObjectFieldReference;
            signature = {
                params = ( POINTER, POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_nSuperInterfaces;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ioctl_ptr;
            signature = {
                params = ( INT, INT, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = INT;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_TypeData_findInstMethodNoIface;
            signature = {
                params = ( POINTER, POINTER, POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_MethodRec_hasMC;
            signature = {
                params = ( POINTER, INT, INT );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = BOOLEAN;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_OS_version;
            signature = {
                params = ();
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_VMThread_start;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = VOID;
                safepoint = MAY_SAFEPOINT;
                sideEffect = CLOBBERS_WORLD;
            };
            usedForCall = no;
        },
        {
            name = fivmr_ObjHeader_getMonitor;
            signature = {
                params = ( POINTER, POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        },
        {
            name = fivmr_FieldRec_type;
            signature = {
                params = ( POINTER );
                pollcheck = IMPLICIT_POLLCHECKS;
                result = POINTER;
                safepoint = CANNOT_SAFEPOINT;
                sideEffect = PURE;
            };
            usedForCall = no;
        }
    );
    knownRemoteCGlobals = ();
    knownRemoteDataConstants = (
        {
            generated = yes;
            name = output_classTable;
        },
        {
            generated = yes;
            name = output_typeList;
        },
        {
            generated = yes;
            name = output_staticRefFields;
        },
        {
            generated = yes;
            name = output_bytecodeTable;
        },
        {
            generated = yes;
            name = output_patchRepo;
        },
        {
            generated = yes;
            name = output_stringTable;
        },
        {
            generated = yes;
            name = output_staticPrimFields;
        },
        {
            generated = yes;
            name = output_stringDataArray;
        },
        {
            generated = yes;
            name = output_degugTable;
        }
    );
}